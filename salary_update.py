# salary_update.py
import pandas as pd
import numpy as np
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
excel_file = os.getenv("EXCEL_FILE_NAME", "Alseit.xlsx")
excel_path = os.path.join(BASE_DIR, excel_file)

def update_salary():
    sales = pd.read_excel(excel_path, sheet_name="–ø—Ä–æ–¥–∞–∂–∏")
    salary = pd.read_excel(excel_path, sheet_name="–∑–∞—Ä–ø–ª–∞—Ç–∞")

    # === 2. –†–∞—Å—á–µ—Ç—ã ===
    vat_rate = float(os.getenv("VAT_RATE", "0.16"))
    low_price_threshold = float(os.getenv("LOW_PRICE_THRESHOLD", "300000"))
    low_price_deduction = float(os.getenv("LOW_PRICE_DEDUCTION", "50000"))
    high_price_deduction = float(os.getenv("HIGH_PRICE_DEDUCTION", "100000"))
    manager_bonus_rate = float(os.getenv("MANAGER_BONUS_RATE", "0.05"))
    rop_bonus_rate = float(os.getenv("ROP_BONUS_RATE", "0.01"))
    
    delivery_pay = float(os.getenv("DELIVERY_PAY", "55000"))
    delivery_shop = float(os.getenv("DELIVERY_SHOP", "4700"))
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ –≤—Å–µ—Ö —Ä–∞—Å—á–µ—Ç–∞—Ö
    sales['total_price'] = sales['price'] * sales['quantity']  # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
    sales['total_purchase'] = sales['purchase'] * sales['quantity']  # –û–±—â–∞—è –∑–∞–∫—É–ø–∫–∞
    
    sales['vat'] = (sales['total_price'] * vat_rate).round(2)
    delivery_costs = {'–ø—ç–π': delivery_pay, '–º–∞–≥–∞–∑–∏–Ω': delivery_shop}
    sales['delivery_cost'] = sales['delivery'].map(delivery_costs).fillna(0)

    base_amount = sales['total_price'] - sales['vat'] - sales['delivery_cost']
    is_low_price = sales['total_price'] < low_price_threshold
    deduction = np.where(is_low_price, low_price_deduction, high_price_deduction)

    sales['manager_bonus'] = (base_amount - deduction) * manager_bonus_rate
    sales['salary_rop'] = (base_amount - deduction) * rop_bonus_rate
    sales['profit'] = (sales['total_price'] - sales['vat'] - sales['total_purchase'] -
                       sales['delivery_cost'] - sales['manager_bonus'] - sales['salary_rop'])

    # === 3. –ì–æ—Ç–æ–≤–∏–º –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è –∑–∞—Ä–ø–ª–∞—Ç—ã ===
    sales['date'] = pd.to_datetime(sales['date'], errors='coerce')

    manager_cols = [c for c in salary.columns if c.startswith("manager_")]

    rows = []
    for _, row in sales.iterrows():
        new_row = {col: 0 for col in salary.columns}
        new_row['date'] = row['date']
        new_row['order'] = row['order']
        new_row['employee ROP'] = row['salary_rop']
        if row['manager'] in manager_cols:
            new_row[row['manager']] = row['manager_bonus']
        rows.append(new_row)

    sales_salary = pd.DataFrame(rows)

    # === 4. –°–∫–ª–µ–∏–≤–∞–µ–º: –æ–∫–ª–∞–¥ + –ø—Ä–æ–¥–∞–∂–∏ ===
    salary_oklad = salary.iloc[[0]].copy()
    salary_final = pd.concat([salary_oklad, sales_salary], ignore_index=True)

    # === 5. –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –±–æ–Ω—É—Å–∞–º ===
    bonus_summary = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º ROP –±–æ–Ω—É—Å—ã
    total_rop_bonus = sales_salary['employee ROP'].sum()
    bonus_summary.append({
        '–¢–∏–ø': 'ROP —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏',
        '–°—É–º–º–∞': total_rop_bonus
    })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    for col in manager_cols:
        if col in sales_salary.columns:
            total_bonus = sales_salary[col].sum()
            if total_bonus > 0:
                bonus_summary.append({
                    '–¢–∏–ø': col,
                    '–°—É–º–º–∞': total_bonus
                })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
    total_all_bonuses = total_rop_bonus + sum([item['–°—É–º–º–∞'] for item in bonus_summary[1:]])
    bonus_summary.append({
        '–¢–∏–ø': '–û–ë–©–ê–Ø –°–£–ú–ú–ê',
        '–°—É–º–º–∞': total_all_bonuses
    })
    
    bonus_summary_df = pd.DataFrame(bonus_summary)

    # === 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º ===
    with pd.ExcelWriter(excel_path, mode="a", if_sheet_exists="replace", engine="openpyxl") as writer:
        salary_final.to_excel(writer, sheet_name="–∑–∞—Ä–ø–ª–∞—Ç–∞", index=False)
        bonus_summary_df.to_excel(writer, sheet_name="—Å–≤–æ–¥–∫–∞_–±–æ–Ω—É—Å–æ–≤", index=False)

    # === 7. –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ===
    result_message = "‚úÖ Salary –æ–±–Ω–æ–≤–ª–µ–Ω–∞: –æ–∫–ª–∞–¥—ã + –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –¥–Ω—è–º –∑–∞–ø–∏—Å–∞–Ω—ã\n"
    result_message += "üìä –°–≤–æ–¥–∫–∞ –±–æ–Ω—É—Å–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ª–∏—Å—Ç '—Å–≤–æ–¥–∫–∞_–±–æ–Ω—É—Å–æ–≤'\n\n"
    result_message += "üí∞ –ò–¢–û–ì–û–í–´–ï –ë–û–ù–£–°–´:\n"
    
    for _, row in bonus_summary_df.iterrows():
        if row['–¢–∏–ø'] == '–û–ë–©–ê–Ø –°–£–ú–ú–ê':
            result_message += f"üéØ {row['–¢–∏–ø']}: {row['–°—É–º–º–∞']:,.2f} —Ç–µ–Ω–≥–µ\n"
        else:
            result_message += f"üë§ {row['–¢–∏–ø']}: {row['–°—É–º–º–∞']:,.2f} —Ç–µ–Ω–≥–µ\n"

    return result_message


if __name__ == "__main__":
    print(update_salary())
