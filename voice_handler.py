import os
import tempfile
import speech_recognition as sr
from pydub import AudioSegment
from telegram import File
import google.generativeai as genai
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ffmpeg –¥–ª—è pydub

try:
    import imageio_ffmpeg as ffmpeg
    ffmpeg_path = ffmpeg.get_ffmpeg_exe()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    os.environ['IMAGEIO_FFMPEG_EXE'] = ffmpeg_path
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º pydub
    AudioSegment.converter = ffmpeg_path
    AudioSegment.ffmpeg = ffmpeg_path
    
    # –î–ª—è ffprobe –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    ffmpeg_dir = os.path.dirname(ffmpeg_path)
    ffprobe_path = os.path.join(ffmpeg_dir, 'ffprobe.exe')
    
    if not os.path.exists(ffprobe_path):
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ ffprobe —Å –¥—Ä—É–≥–∏–º –∏–º–µ–Ω–µ–º
        ffprobe_path = ffmpeg_path.replace('ffmpeg', 'ffprobe')
    
    if os.path.exists(ffprobe_path):
        AudioSegment.ffprobe = ffprobe_path
        print(f"üîß –ù–∞—Å—Ç—Ä–æ–µ–Ω ffmpeg: {ffmpeg_path}")
        print(f"üîß –ù–∞—Å—Ç—Ä–æ–µ–Ω ffprobe: {ffprobe_path}")
    else:
        print(f"üîß –ù–∞—Å—Ç—Ä–æ–µ–Ω ffmpeg: {ffmpeg_path}")
        print("‚ö†Ô∏è ffprobe –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ ffmpeg")
        
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å ffmpeg –≤ PATH –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    current_path = os.environ.get('PATH', '')
    if ffmpeg_dir not in current_path:
        os.environ['PATH'] = f"{ffmpeg_dir};{current_path}"
        print(f"üîß –î–æ–±–∞–≤–ª–µ–Ω –≤ PATH: {ffmpeg_dir}")
        
except ImportError:
    print("‚ö†Ô∏è imageio-ffmpeg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, pydub –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ ffmpeg –≤ PATH")
except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ffmpeg: {e}")

load_dotenv()

class VoiceHandler:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.recognizer = sr.Recognizer()
        self.api_key = os.getenv("GEMINI_API_KEY")
        self.model = None
        
        if self.api_key:
            genai.configure(api_key=self.api_key)
            self.model = genai.GenerativeModel('gemini-1.5-flash')
    
    async def process_voice_message(self, voice_file: File):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç
        
        Args:
            voice_file (File): –ì–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª –æ—Ç Telegram
            
        Returns:
            str: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        oga_file_path = None
        wav_file_path = None
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            with tempfile.NamedTemporaryFile(suffix=".oga", delete=False) as temp_oga:
                oga_file_path = temp_oga.name
                # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await voice_file.download_to_drive(oga_file_path)
                
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
            try:
                # –°–ø–æ—Å–æ–± 1: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ pydub (—Ç—Ä–µ–±—É–µ—Ç ffmpeg)
                with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_wav:
                    wav_file_path = temp_wav.name
                    
                try:
                    print(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é OGA –≤ WAV —á–µ—Ä–µ–∑ ffmpeg...")
                    print(f"üìÅ OGA —Ñ–∞–π–ª: {oga_file_path} (—Ä–∞–∑–º–µ—Ä: {os.path.getsize(oga_file_path)} –±–∞–π—Ç)")
                    
                    # –°–ø–æ—Å–æ–± 1: –ü—Ä—è–º–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ subprocess (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π)
                    success = self._convert_oga_to_wav_direct(oga_file_path, wav_file_path)
                    
                    if success:
                        print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (—Ä–∞–∑–º–µ—Ä: {os.path.getsize(wav_file_path)} –±–∞–π—Ç)")
                        
                        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
                        text = self._recognize_speech(wav_file_path)
                        print(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {text[:50]}...")
                        
                        return text
                    else:
                        # –ï—Å–ª–∏ –ø—Ä—è–º–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º pydub
                        print("‚ö†Ô∏è –ü—Ä—è–º–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É—é —á–µ—Ä–µ–∑ pydub...")
                        
                        try:
                            # –ó–∞–≥—Ä—É–∂–∞–µ–º OGA —Ñ–∞–π–ª —á–µ—Ä–µ–∑ pydub
                            audio = AudioSegment.from_ogg(oga_file_path)
                            print(f"‚úÖ OGA –∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ pydub (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {len(audio)}ms)")
                            
                            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
                            audio.export(wav_file_path, format="wav")
                            print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ pydub –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                            
                            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
                            text = self._recognize_speech(wav_file_path)
                            print(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {text[:50]}...")
                            
                            return text
                            
                        except Exception as pydub_error:
                            print(f"‚ùå –û—à–∏–±–∫–∞ pydub: {type(pydub_error).__name__}: {str(pydub_error)}")
                            raise pydub_error
                    
                except Exception as conv_error:
                    print(f"‚ùå –í—Å–µ —Å–ø–æ—Å–æ–±—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å: {type(conv_error).__name__}: {str(conv_error)}")
                    
                    # –°–ø–æ—Å–æ–± 2: –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è OGA (–ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
                    try:
                        text = self._recognize_speech_from_oga(oga_file_path)
                        return text
                    except Exception as oga_error:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è OGA: {oga_error}")
                        
                        # –°–ø–æ—Å–æ–± 3: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
                        return ("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
                               f"üîç **–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:** {str(conv_error)}\n\n"
                               "üîß **–†–µ—à–µ–Ω–∏–µ:** FFmpeg –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.\n\n"
                               "üí° **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:**\n"
                               "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–º –∂–µ –∑–∞–ø—Ä–æ—Å–æ–º\n"
                               "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã: /edit, /analyze, /ask")
                        
            except Exception as e:
                return f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
                
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
        
        finally:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            if oga_file_path:
                self._safe_delete_file(oga_file_path)
            if wav_file_path:
                self._safe_delete_file(wav_file_path)
    
    def _recognize_speech(self, wav_file_path):
        """
        –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä–µ—á—å –∏–∑ WAV —Ñ–∞–π–ª–∞
        
        Args:
            wav_file_path (str): –ü—É—Ç—å –∫ WAV —Ñ–∞–π–ª—É
            
        Returns:
            str: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        try:
            with sr.AudioFile(wav_file_path) as source:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞—É–¥–∏–æ –∏–∑ —Ñ–∞–π–ª–∞
                audio = self.recognizer.record(source)
                
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                try:
                    # –ü—Ä–æ–±—É–µ–º Google Speech Recognition (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
                    text = self.recognizer.recognize_google(audio, language='ru-RU')
                    return text
                except sr.UnknownValueError:
                    # –ï—Å–ª–∏ Google –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å, –ø—Ä–æ–±—É–µ–º Sphinx (–æ—Ñ–ª–∞–π–Ω)
                    try:
                        text = self.recognizer.recognize_sphinx(audio, language='ru-RU')
                        return text
                    except:
                        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç—á–µ."
                except sr.RequestError as e:
                    return f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}"
                    
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞: {e}"
    
    def _recognize_speech_from_oga(self, oga_file_path):
        """
        –ü—ã—Ç–∞–µ—Ç—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –Ω–∞–ø—Ä—è–º—É—é –∏–∑ OGA —Ñ–∞–π–ª–∞ (–±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏)
        –≠—Ç–æ –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–∞–∫ –∫–∞–∫ SpeechRecognition –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç OGA
        
        Args:
            oga_file_path (str): –ü—É—Ç—å –∫ OGA —Ñ–∞–π–ª—É
            
        Returns:
            str: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        # OGA —Ñ–∞–π–ª—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è SpeechRecognition –Ω–∞–ø—Ä—è–º—É—é
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –ø–æ–ø—ã—Ç–∫–∏ —á—Ç–µ–Ω–∏—è
        return ("‚ùå –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π Telegram (OGA —Ñ–æ—Ä–º–∞—Ç) —Ç—Ä–µ–±—É–µ—Ç—Å—è ffmpeg. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ffmpeg —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ FFMPEG_INSTALL.md "
                "–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    
    def parse_voice_command(self, recognized_text):
        """
        –ü–∞—Ä—Å–∏—Ç –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π
        
        Args:
            recognized_text (str): –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            
        Returns:
            dict: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ
        """
        if not self.model:
            return {
                'success': False,
                'error': 'Gemini AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–∞–Ω–¥—ã'
            }
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
            prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, —á—Ç–æ –æ–Ω —Ö–æ—á–µ—Ç —Å–¥–µ–ª–∞—Ç—å.
            
            –ö–û–ú–ê–ù–î–ê: "{recognized_text}"
            
            –í–û–ó–ú–û–ñ–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:
            1. –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∑–∞–∫–∞–∑–µ
            2. –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –≤ –∑–∞–∫–∞–∑–µ  
            3. –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
            4. –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
            5. –î—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            
            –°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê (JSON):
            {{
                "action": "edit_order|get_info|other",
                "order_number": —á–∏—Å–ª–æ –∏–ª–∏ null,
                "field_to_change": "quantity|price|manager|null",
                "new_value": "–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ null",
                "product_name": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ null",
                "confidence": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1,
                "original_text": "–∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç"
            }}
            
            –ü–†–ò–ú–ï–†–´:
            - "–∏–∑–º–µ–Ω–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–ª–æ–≤ 3 —à—Ç—É–∫–∏ –≤ –Ω–æ–º–µ—Ä–µ –∑–∞–∫–∞–∑–∞ 2" -> action: "edit_order", order_number: 2, field_to_change: "quantity", new_value: "3", product_name: "–∫–æ—Ç–ª—ã"
            - "–ø–æ–º–µ–Ω—è–π —Ü–µ–Ω—É –≤ –∑–∞–∫–∞–∑–µ 5 –Ω–∞ 50000" -> action: "edit_order", order_number: 5, field_to_change: "price", new_value: "50000"
            - "–Ω–∞–∑–Ω–∞—á—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ò–≤–∞–Ω –≤ –∑–∞–∫–∞–∑–µ 3" -> action: "edit_order", order_number: 3, field_to_change: "manager", new_value: "–ò–≤–∞–Ω"
            
            –í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
            """
            
            response = self.model.generate_content(prompt)
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            import json
            try:
                command_data = json.loads(response.text.strip())
                command_data['success'] = True
                return command_data
            except json.JSONDecodeError:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é
                return self._manual_parse_command(recognized_text)
                
        except Exception as e:
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}'
            }
    
    def _manual_parse_command(self, text):
        """
        –†—É—á–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        
        Args:
            text (str): –¢–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
            
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ
        """
        text_lower = text.lower()
        
        # –ò—â–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
        order_number = None
        order_keywords = ['–∑–∞–∫–∞–∑', '–∑–∞–∫–∞–∑–∞', '–∑–∞–∫–∞–∑–µ', '–Ω–æ–º–µ—Ä', '–Ω–æ–º–µ—Ä–∞', '–Ω–æ–º–µ—Ä–µ']
        for i, word in enumerate(text.split()):
            if any(keyword in word.lower() for keyword in order_keywords):
                # –ò—â–µ–º —á–∏—Å–ª–æ —Ä—è–¥–æ–º
                for j in range(max(0, i-2), min(len(text.split()), i+3)):
                    try:
                        potential_number = text.split()[j].strip('‚Ññ#.,')
                        if potential_number.isdigit():
                            order_number = int(potential_number)
                            break
                    except:
                        continue
                if order_number:
                    break
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        action = "other"
        field_to_change = None
        new_value = None
        product_name = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if any(word in text_lower for word in ['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '—à—Ç—É–∫', '—à—Ç—É–∫–∏', '—à—Ç']):
            action = "edit_order"
            field_to_change = "quantity"
            
            # –ò—â–µ–º —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            import re
            numbers = re.findall(r'\d+', text)
            if numbers:
                new_value = numbers[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –∫–∞–∫ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
        elif any(word in text_lower for word in ['—Ü–µ–Ω–∞', '—Ü–µ–Ω—É', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å—É–º–º–∞']):
            action = "edit_order"
            field_to_change = "price"
            
            # –ò—â–µ–º —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã
            import re
            numbers = re.findall(r'\d+', text)
            if numbers:
                new_value = numbers[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –∫–∞–∫ –Ω–æ–≤—É—é —Ü–µ–Ω—É
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        elif any(word in text_lower for word in ['–º–µ–Ω–µ–¥–∂–µ—Ä', '–º–µ–Ω–µ–¥–∂–µ—Ä–∞', '–Ω–∞–∑–Ω–∞—á—å']):
            action = "edit_order"
            field_to_change = "manager"
            
            # –ò—â–µ–º –∏–º—è (—Å–ª–æ–≤–æ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã, –Ω–µ —è–≤–ª—è—é—â–µ–µ—Å—è —Å–ª—É–∂–µ–±–Ω—ã–º)
            words = text.split()
            for word in words:
                if word[0].isupper() and word.lower() not in ['–∑–∞–∫–∞–∑', '–∑–∞–∫–∞–∑–∞', '–∑–∞–∫–∞–∑–µ', '–º–µ–Ω–µ–¥–∂–µ—Ä', '–Ω–∞–∑–Ω–∞—á—å']:
                    new_value = word
                    break
        
        # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        if any(word in text_lower for word in ['–∫–æ—Ç–µ–ª', '–∫–æ—Ç–ª—ã', '–∫–æ—Ç–ª–∞']):
            product_name = "–∫–æ—Ç–ª—ã"
        
        return {
            'success': True,
            'action': action,
            'order_number': order_number,
            'field_to_change': field_to_change,
            'new_value': new_value,
            'product_name': product_name,
            'confidence': 0.7,  # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
            'original_text': text
        }
    
    def create_text_command(self, command_data):
        """
        –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
        
        Args:
            command_data (dict): –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ
            
        Returns:
            str: –¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        """
        if not command_data.get('success'):
            return None
        
        if command_data.get('action') != 'edit_order':
            return command_data.get('original_text', '')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        parts = []
        
        if command_data.get('order_number'):
            parts.append(f"–∑–∞–∫–∞–∑ –Ω–æ–º–µ—Ä {command_data['order_number']}")
        
        if command_data.get('field_to_change') == 'quantity' and command_data.get('new_value'):
            if command_data.get('product_name'):
                parts.append(f"–∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {command_data['product_name']} –Ω–∞ {command_data['new_value']}")
            else:
                parts.append(f"–∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ {command_data['new_value']}")
        
        elif command_data.get('field_to_change') == 'price' and command_data.get('new_value'):
            parts.append(f"–∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –Ω–∞ {command_data['new_value']}")
        
        elif command_data.get('field_to_change') == 'manager' and command_data.get('new_value'):
            parts.append(f"–Ω–∞–∑–Ω–∞—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {command_data['new_value']}")
        
        if parts:
            return " ".join(parts)
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            return command_data.get('original_text', '')
    
    def _safe_delete_file(self, file_path):
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
        
        Args:
            file_path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        """
        import time
        max_attempts = 3
        
        for attempt in range(max_attempts):
            try:
                if os.path.exists(file_path):
                    os.unlink(file_path)
                    return True
            except PermissionError:
                # –§–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
                time.sleep(0.1)
                continue
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}")
                break
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –ø–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∂–µ
        try:
            import atexit
            atexit.register(lambda: self._cleanup_file(file_path))
        except:
            pass
        
        return False
    
    def _cleanup_file(self, file_path):
        """–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        try:
            if os.path.exists(file_path):
                os.unlink(file_path)
        except:
            pass
    
    def _convert_oga_to_wav_direct(self, oga_path, wav_path):
        """
        –ü—Ä—è–º–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è OGA –≤ WAV —á–µ—Ä–µ–∑ subprocess
        
        Args:
            oga_path (str): –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É OGA —Ñ–∞–π–ª—É
            wav_path (str): –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É WAV —Ñ–∞–π–ª—É
            
        Returns:
            bool: True –µ—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            import subprocess
            import imageio_ffmpeg as ffmpeg
            
            ffmpeg_exe = ffmpeg.get_ffmpeg_exe()
            
            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ OGA –≤ WAV
            cmd = [
                ffmpeg_exe,
                "-i", oga_path,           # –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
                "-acodec", "pcm_s16le",   # –∫–æ–¥–µ–∫ –¥–ª—è WAV
                "-ar", "16000",           # —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ 16kHz (—Ö–æ—Ä–æ—à–æ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏)
                "-ac", "1",               # –º–æ–Ω–æ
                "-y",                     # –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
                wav_path                  # –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            ]
            
            print(f"üîß –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: {' '.join(cmd[:3])} ... {cmd[-1]}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=30  # —Ç–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
            )
            
            if result.returncode == 0:
                print(f"‚úÖ FFmpeg –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                return True
            else:
                print(f"‚ùå FFmpeg –æ—à–∏–±–∫–∞ (–∫–æ–¥ {result.returncode}): {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            print("‚ùå –¢–∞–π–º–∞—É—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (>30 —Å–µ–∫)")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {type(e).__name__}: {e}")
            return False
