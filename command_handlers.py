"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
"""
import os
import logging
from typing import Optional
from telegram import Update
from telegram.ext import ContextTypes
from sales_folder.chatgpt_analyzer import ChatGPTAnalyzer
from salary_folder.salary_update import update_salary, get_salary_summary
from utils import data_cache, get_gross_profit, get_net_profit, get_net_profit_from_sales, get_office_expenses_total, get_office_summary, add_office_constants
from config import FILE_PATHS, TELEGRAM_SETTINGS
from employee_rename_manager import EmployeeRenameManager

logger = logging.getLogger(__name__)


class CommandHandler:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    
    –°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞,
    –≤–∫–ª—é—á–∞—è –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —Å–ø—Ä–∞–≤–∫—É.
    """
    
    def __init__(self, chatgpt_analyzer: ChatGPTAnalyzer):
        self.chatgpt_analyzer = chatgpt_analyzer
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        chatgpt_status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if self.chatgpt_analyzer else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        welcome_text = (
            f"ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!**\n\n"
            f"–Ø —É–º–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç —Å AI –∞–Ω–∞–ª–∏–∑–æ–º –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–æ–º.\n\n"
            f"üìä **ChatGPT AI:** {chatgpt_status}\n\n"
            f"üöÄ **–ë–´–°–¢–†–´–ï –ö–û–ú–ê–ù–î–´:**\n"
            f"‚Ä¢ `/update` - –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—ã –∏ –±–æ–Ω—É—Å—ã\n"
            f"‚Ä¢ `/analyze` - –ø–æ–ª–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö\n"
            f"‚Ä¢ `/insights` - –±—ã—Å—Ç—Ä—ã–µ –∏–Ω—Å–∞–π—Ç—ã –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º\n"
            f"‚Ä¢ `/edit` - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ AI\n"
            f"‚Ä¢ `/help` - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º\n\n"
            f"üí° **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ** –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!"
        )
        
        await update.message.reply_text(welcome_text)
    
    async def update_salary_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /update"""
        try:
            result = update_salary()
            await update.message.reply_text(result, parse_mode=None)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç: {e}")
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")
    
    async def analyze_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analyze"""
        if not self.chatgpt_analyzer:
            await update.message.reply_text("‚ùå ChatGPT AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞.")
            return
        
        await update.message.reply_text("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
        
        try:
            excel_path = os.path.join(os.path.dirname(__file__), FILE_PATHS['excel_file'])
            analysis = self.chatgpt_analyzer.analyze_sales_data(excel_path)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏
            if len(analysis) > TELEGRAM_SETTINGS['max_message_length']:
                parts = self._split_message(analysis, TELEGRAM_SETTINGS['max_message_length'])
                for i, part in enumerate(parts):
                    await update.message.reply_text(f"üìà –ê–Ω–∞–ª–∏–∑ (—á–∞—Å—Ç—å {i+1}/{len(parts)}):\n\n{part}")
            else:
                await update.message.reply_text(f"üìà AI –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö:\n\n{analysis}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
    
    async def insights_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /insights"""
        try:
            excel_path = os.path.join(os.path.dirname(__file__), FILE_PATHS['excel_file'])
            insights = self.chatgpt_analyzer.get_quick_insights(excel_path)
            await update.message.reply_text(insights)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Å–∞–π—Ç–æ–≤: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Å–∞–π—Ç–æ–≤: {str(e)}")
    
    async def edit_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /edit"""
        if not self.chatgpt_analyzer:
            await update.message.reply_text("‚ùå ChatGPT AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ)
        if not context.args:
            await update.message.reply_text(
                "üìù –£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å.\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /edit –∑–∞–∫–∞–∑ –Ω–æ–º–µ—Ä #2 –≤–º–µ—Å—Ç–æ –¥–≤—É—Ö –∫–æ—Ç–ª–æ–≤ –≤–∑—è–ª –æ–¥–∏–Ω\n"
                "‚Ä¢ /edit –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ '–∫–æ—Ç–ª—ã' –≤ –∑–∞–∫–∞–∑–µ 5 —Å 3 –Ω–∞ 1\n"
                "‚Ä¢ /edit –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ –∑–∞–∫–∞–∑–µ 1 –Ω–∞ 50000\n"
                "‚Ä¢ /edit –Ω–∞–∑–Ω–∞—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ò–≤–∞–Ω –≤ –∑–∞–∫–∞–∑–µ 3"
            )
            return
        
        edit_request = " ".join(context.args)
        await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ...")
        
        try:
            excel_path = os.path.join(os.path.dirname(__file__), FILE_PATHS['excel_file'])
            result = self.chatgpt_analyzer.edit_excel_data(excel_path, edit_request)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏
            if len(result) > TELEGRAM_SETTINGS['max_message_length']:
                parts = self._split_message(result, TELEGRAM_SETTINGS['max_message_length'])
                for i, part in enumerate(parts):
                    await update.message.reply_text(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç (—á–∞—Å—Ç—å {i+1}/{len(parts)}):\n\n{part}")
            else:
                await update.message.reply_text(f"üìù {result}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
    
    async def refresh_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /refresh"""
        try:
            excel_path = os.path.join(os.path.dirname(__file__), FILE_PATHS['excel_file'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(excel_path):
                await update.message.reply_text("‚ùå Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ –¥–æ –æ—á–∏—Å—Ç–∫–∏
            cache_info_before = data_cache.get_cache_info()
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —Ñ–∞–π–ª–∞
            data_cache.refresh_file(excel_path)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_mod_time = os.path.getmtime(excel_path)
            file_size = os.path.getsize(excel_path)
            
            await update.message.reply_text(
                f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
                f"üìÅ –§–∞–π–ª: {FILE_PATHS['excel_file']}\n"
                f"üìÖ –ò–∑–º–µ–Ω–µ–Ω: {file_mod_time}\n"
                f"üìä –†–∞–∑–º–µ—Ä: {file_size:,} –±–∞–π—Ç\n"
                f"üóëÔ∏è –û—á–∏—â–µ–Ω–æ –∏–∑ –∫—ç—à–∞: {cache_info_before['cache_size']} –∑–∞–ø–∏—Å–µ–π\n\n"
                f"–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞."
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    
    async def ask_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ask"""
        if not self.chatgpt_analyzer:
            await update.message.reply_text("‚ùå ChatGPT AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å
        if not context.args:
            await update.message.reply_text(
                "‚ùì –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –¥–∞–Ω–Ω—ã—Ö.\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /ask —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é\n"
                "‚Ä¢ /ask —Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ —É –ò–≤–∞–Ω–∞\n"
            )
            return
        
        question = " ".join(context.args)
        await update.message.reply_text("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...")
        
        try:
            excel_path = os.path.join(os.path.dirname(__file__), FILE_PATHS['excel_file'])
            result = self.chatgpt_analyzer.universal_query(excel_path, question)
            
            # –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º, –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º –¥–ª–∏–Ω—É
            if len(result) > TELEGRAM_SETTINGS['max_message_length']:
                parts = self._split_message(result, TELEGRAM_SETTINGS['max_message_length'])
                for i, part in enumerate(parts):
                    await update.message.reply_text(f"üí° –û—Ç–≤–µ—Ç (—á–∞—Å—Ç—å {i+1}/{len(parts)}):\n\n{part}")
            else:
                await update.message.reply_text(f"üí° {result}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
ü§ñ –§–ò–ù–ê–ù–°–û–í–´–ô –ë–û–¢ - –°–ü–†–ê–í–ö–ê

üìä –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:
‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ /update - –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—ã –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–æ–Ω—É—Å—ã
‚Ä¢ /analyze - –ø–æ–ª–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö (ChatGPT)
‚Ä¢ /insights - –±—ã—Å—Ç—Ä—ã–µ –∏–Ω—Å–∞–π—Ç—ã –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
‚Ä¢ /edit - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Excel (AI)
‚Ä¢ /refresh - –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel
‚Ä¢ /ask - –±—ã—Å—Ç—Ä—ã–π –≤–æ–ø—Ä–æ—Å –æ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ /employees - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
‚Ä¢ /rename - –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
‚Ä¢ /confirm_rename - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîß –ù–ê–°–¢–†–û–ô–ö–ò:
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª Alseit.xlsx –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ —Å –±–æ—Ç–æ–º
‚Ä¢ –î–ª—è AI –∞–Ω–∞–ª–∏–∑–∞ –Ω—É–∂–µ–Ω OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª–µ

üìà –ß–¢–û –î–ï–õ–ê–ï–¢ –ë–û–¢:
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ù–î–° (16%)
‚Ä¢ –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
‚Ä¢ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–æ–Ω—É—Å—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (5%) –∏ ROP (1%)
‚Ä¢ –°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–∫–∏ –≤ Excel
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é AI
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Excel —á–µ—Ä–µ–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Excel —Ñ–∞–π–ª–µ
‚Ä¢ –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –õ–Æ–ë–´–ï –≤–æ–ø—Ä–æ—Å—ã –æ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö!
‚Ä¢ –£–ø—Ä–∞–≤–ª—è–µ—Ç –ª–∏—á–Ω—ã–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–∏–º–∏—Ç–æ–≤

ü§ñ –ü–†–ò–ú–ï–†–´ –£–ú–ù–´–• –ó–ê–ü–†–û–°–û–í:
‚Ä¢ "–°–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ê–Ω–Ω–∞?"
‚Ä¢ "–ö–∞–∫–æ–π —Ç–æ–≤–∞—Ä –ø—Ä–∏–Ω–æ—Å–∏—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø—Ä–∏–±—ã–ª–∏?"
‚Ä¢ "–ü–æ–∫–∞–∂–∏ –≤—Å–µ –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞ –¢–û–û –°—Ç—Ä–æ–π"
‚Ä¢ "–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂ –≤ —è–Ω–≤–∞—Ä–µ"
‚Ä¢ "–°—Ä–∞–≤–Ω–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"
‚Ä¢ "–ù–∞–π–¥–∏ —Å–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ –∑–∞–∫–∞–∑—ã"
‚Ä¢ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏"

üí∞ –ü–†–ò–ú–ï–†–´ –õ–ò–ß–ù–´–• –†–ê–°–•–û–î–û–í:
‚Ä¢ "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ –µ–¥–∞ 5000 —Ä–µ—Å—Ç–æ—Ä–∞–Ω"
‚Ä¢ "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü"
‚Ä¢ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã —Ä–∞—Å—Ö–æ–¥–æ–≤"
‚Ä¢ "–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—è—á–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã"

üìù –ü–†–ò–ú–ï–†–´ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø:
‚Ä¢ /edit –∑–∞–∫–∞–∑ –Ω–æ–º–µ—Ä #2 –≤–º–µ—Å—Ç–æ –¥–≤—É—Ö –∫–æ—Ç–ª–æ–≤ –≤–∑—è–ª –æ–¥–∏–Ω
‚Ä¢ /edit –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ '–∫–æ—Ç–ª—ã' –≤ –∑–∞–∫–∞–∑–µ 5 —Å 3 –Ω–∞ 1
‚Ä¢ /edit –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ –∑–∞–∫–∞–∑–µ 1 –Ω–∞ 50000
‚Ä¢ /edit –Ω–∞–∑–Ω–∞—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ò–≤–∞–Ω –≤ –∑–∞–∫–∞–∑–µ 3

üë• –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ò–ï –°–û–¢–†–£–î–ù–ò–ö–û–í:
‚Ä¢ /employees - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
‚Ä¢ /rename –ò–≤–∞–Ω –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ - –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
‚Ä¢ /confirm_rename –ò–≤–∞–Ω –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
‚Ä¢ python employee_rename_manager.py "–ò–≤–∞–Ω" "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤" - —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª
        """
        await update.message.reply_text(help_text)
    
    def _split_message(self, text: str, max_length: int) -> list:
        """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏"""
        if len(text) <= max_length:
            return [text]
        
        parts = []
        for i in range(0, len(text), max_length):
            parts.append(text[i:i + max_length])
        
        return parts
    
    async def list_employees_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /employees - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        try:
            manager = EmployeeRenameManager()
            employees = manager.get_all_employee_names()
            
            message = "üë• **–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:**\n\n"
            
            for file_name, sheets in employees.items():
                message += f"üìÑ **{file_name}:**\n"
                for sheet_name, names in sheets.items():
                    if names:
                        message += f"  üìã {sheet_name}: {', '.join(names)}\n"
                    else:
                        message += f"  üìã {sheet_name}: (–ø—É—Å—Ç–æ)\n"
                message += "\n"
            
            await update.message.reply_text(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {str(e)}")
    
    async def rename_employee_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rename - –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
            if not context.args or len(context.args) < 2:
                await update.message.reply_text(
                    "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!**\n\n"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/rename <—Å—Ç–∞—Ä–æ–µ_–∏–º—è> <–Ω–æ–≤–æ–µ_–∏–º—è>`\n"
                    "–ü—Ä–∏–º–µ—Ä: `/rename –ò–≤–∞–Ω –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤`\n\n"
                    "üí° –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: `/employees`"
                )
                return
            
            old_name = context.args[0]
            new_name = " ".join(context.args[1:])  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ
            
            manager = EmployeeRenameManager()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            is_valid, error_msg = manager.validate_rename(old_name, new_name)
            if not is_valid:
                await update.message.reply_text(f"‚ùå **–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:** {error_msg}")
                return
            
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
            preview = manager.get_rename_preview(old_name, new_name)
            
            message = f"üìã **–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:**\n"
            message += f"`{old_name}` ‚Üí `{new_name}`\n\n"
            
            total_changes = 0
            for file_name, sheets in preview.items():
                file_changes = 0
                for sheet_name, count in sheets.items():
                    if count > 0:
                        file_changes += count
                        total_changes += count
                
                if file_changes > 0:
                    message += f"üìÑ **{file_name}:** {file_changes} –∏–∑–º–µ–Ω–µ–Ω–∏–π\n"
            
            if total_changes == 0:
                await update.message.reply_text("‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            message += f"\n‚ùì **–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ?**\n"
            message += f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/confirm_rename {old_name} {new_name}`"
            
            await update.message.reply_text(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def confirm_rename_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /confirm_rename - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"""
        try:
            if not context.args or len(context.args) < 2:
                await update.message.reply_text(
                    "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!**\n\n"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/confirm_rename <—Å—Ç–∞—Ä–æ–µ_–∏–º—è> <–Ω–æ–≤–æ–µ_–∏–º—è>`"
                )
                return
            
            old_name = context.args[0]
            new_name = " ".join(context.args[1:])
            
            manager = EmployeeRenameManager()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            is_valid, error_msg = manager.validate_rename(old_name, new_name)
            if not is_valid:
                await update.message.reply_text(f"‚ùå **–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:** {error_msg}")
                return
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
            await update.message.reply_text("üîÑ **–í—ã–ø–æ–ª–Ω—è—é –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ...**")
            
            results = manager.rename_employee(old_name, new_name, dry_run=False)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            message = f"‚úÖ **–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n"
            message += f"`{old_name}` ‚Üí `{new_name}`\n\n"
            
            success_count = 0
            for file_name, sheets in results.items():
                file_success = False
                for sheet_name, success in sheets.items():
                    if success:
                        file_success = True
                        success_count += 1
                
                if file_success:
                    message += f"üìÑ **{file_name}:** ‚úÖ —É—Å–ø–µ—à–Ω–æ\n"
            
            if success_count == 0:
                message += "‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ –≤–Ω–µ—Å–µ–Ω—ã"
            
            await update.message.reply_text(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
