import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from salary_folder.salary_update import update_salary
from sales_folder.chatgpt_analyzer import ChatGPTAnalyzer
from sales_folder.voice_handler import VoiceHandler
from sales_folder.ai_recommendations import AIRecommendations
from personal_expenses.expense_manager import PersonalExpenseManager
from office_expenses.expense_manager import OfficeExpenseManager
from dotenv import load_dotenv
from utils import data_cache, get_gross_profit, get_net_profit, get_net_profit_from_sales, get_office_expenses_total, get_office_summary, add_office_constants, split_message_if_long, load_excel_with_cache

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
EXCEL_FILE = os.getenv("EXCEL_FILE_NAME", "Alseit.xlsx")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ChatGPT –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
try:
    chatgpt_analyzer = ChatGPTAnalyzer()
    CHATGPT_AVAILABLE = True
except Exception as e:
    print(f"‚ö†Ô∏è ChatGPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    CHATGPT_AVAILABLE = False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
try:
    voice_handler = VoiceHandler()
    VOICE_AVAILABLE = True
except Exception as e:
    print(f"‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    VOICE_AVAILABLE = False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏


try:
    excel_path = os.path.join(os.path.dirname(__file__), EXCEL_FILE)
    ai_recommendations = AIRecommendations(excel_path)
    AI_RECOMMENDATIONS_AVAILABLE = True
except Exception as e:
    print(f"‚ö†Ô∏è AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    AI_RECOMMENDATIONS_AVAILABLE = False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã —Ä–∞—Å—Ö–æ–¥–æ–≤
try:
    expenses_file = os.path.join(os.path.dirname(__file__), "expenses.xlsx")
    personal_expense_manager = PersonalExpenseManager(expenses_file)
    office_expense_manager = OfficeExpenseManager(expenses_file)
    EXPENSES_AVAILABLE = True
except Exception as e:
    print(f"‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä—ã —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    EXPENSES_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –º–æ–¥—É–ª—è
from keyboards import (
    get_main_reply_keyboard, get_main_menu_keyboard, get_sales_menu_keyboard,
    get_salary_menu_keyboard, get_office_menu_keyboard, 
    get_personal_expenses_menu_keyboard, get_office_expenses_menu_keyboard
)




# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async def safe_edit_message(query, text, reply_markup=None, parse_mode='Markdown'):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    
    Args:
        query: CallbackQuery –æ–±—ä–µ–∫—Ç –æ—Ç Telegram
        text (str): –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        reply_markup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        parse_mode (str): –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (Markdown/HTML)
    
    Returns:
        None
    """
    try:
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await query.message.reply_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
        except Exception as e2:
            # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e2)}")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –º–æ–¥—É–ª—è
from command_handlers import CommandHandler as BotCommandHandler

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥
command_handler = BotCommandHandler(chatgpt_analyzer if CHATGPT_AVAILABLE else None)



# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK –ó–ê–ü–†–û–°–û–í (–í–ö–õ–ê–î–ö–ò) ===

async def button_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤–∫–ª–∞–¥–æ–∫
    
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ callback –∑–∞–ø—Ä–æ—Å—ã –æ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä,
    –≤–∫–ª—é—á–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –º–µ–Ω—é –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.
    
    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    
    Returns:
        None
    """
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "main_menu":
        chatgpt_status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if CHATGPT_AVAILABLE else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        voice_status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if VOICE_AVAILABLE else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        welcome_text = (
            f"ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
            f"üìä ChatGPT AI: {chatgpt_status}\n"
            f"üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã: {voice_status}\n\n"
            f"üéØ **–í–´–ë–ï–†–ò–¢–ï –†–ê–ó–î–ï–õ** –¥–ª—è —Ä–∞–±–æ—Ç—ã:"
        )
        
        await safe_edit_message(
            query=query,
            text=welcome_text,
            reply_markup=get_main_menu_keyboard()
        )
    
    # –†–∞–∑–¥–µ–ª –ø—Ä–æ–¥–∞–∂
    elif data == "tab_sales":
        await safe_edit_message(
            query=query,
            text="üìä **–ü–†–û–î–ê–ñ–ò**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_sales_menu_keyboard()
        )
    
    # –†–∞–∑–¥–µ–ª –∑–∞—Ä–ø–ª–∞—Ç
    elif data == "tab_salary":
        await safe_edit_message(
            query=query,
            text="üí∞ **–ó–ê–†–ü–õ–ê–¢–´**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_salary_menu_keyboard()
        )
    
    # –†–∞–∑–¥–µ–ª –ª–∏—á–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
    elif data == "tab_personal":
        await safe_edit_message(
            query=query,
            text="üè† **–õ–ò–ß–ù–´–ï –†–ê–°–•–û–î–´**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_personal_expenses_menu_keyboard()
        )
    
    # –†–∞–∑–¥–µ–ª –æ—Ñ–∏—Å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
    elif data == "tab_office":
        await safe_edit_message(
            query=query,
            text="üè¢ **–û–§–ò–°–ù–´–ï –†–ê–°–•–û–î–´**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_office_expenses_menu_keyboard()
        )
    
    
    
    # –†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏
    elif data == "tab_help":
        help_text = """
ü§ñ **–°–ü–†–ê–í–ö–ê –ü–û –ë–û–¢–£**

üìä **–ü–†–û–î–ê–ñ–ò –ò –ó–ê–†–ü–õ–ê–¢–´**:
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç –∏ —Ä–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–æ–≤
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ AI
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –∏–Ω—Å–∞–π—Ç—ã –∏ –æ—Ç—á–µ—Ç—ã


ü§ñ **AI –ê–ù–ê–õ–ò–ó**:
‚Ä¢ –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤

‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò**:
‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–¥–∞–∂

üí° **–ü–†–ò–ú–ï–†–´ –ö–û–ú–ê–ù–î**:
‚Ä¢ "–°–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ò–≤–∞–Ω?"
‚Ä¢ "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ –µ–¥–∞ 5000 —Ä–µ—Å—Ç–æ—Ä–∞–Ω"
‚Ä¢ "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü"
‚Ä¢ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã —Ä–∞—Å—Ö–æ–¥–æ–≤"
        """
        await safe_edit_message(
            query=query,
            text=help_text,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –†–ê–ó–î–ï–õ–ê –ü–†–û–î–ê–ñ ===
    elif data == "sales_update":
        try:
            result = update_salary()
            await safe_edit_message(
                query=query,
                text=f"üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–†–ü–õ–ê–¢\n\n{result}",
                reply_markup=get_sales_menu_keyboard(),
                parse_mode=None
            )
        except Exception as e:
            await safe_edit_message(
                query=query,
                text=f"‚ùå –û—à–∏–±–∫–∞: {e}",
                reply_markup=get_sales_menu_keyboard()
            )
    
    elif data == "sales_insights":
        try:
            excel_path = os.path.join(os.path.dirname(__file__), EXCEL_FILE)
            insights = chatgpt_analyzer.get_quick_insights(excel_path)
            await safe_edit_message(
                query=query,
                text=f"üìà **–ë–´–°–¢–†–´–ï –ò–ù–°–ê–ô–¢–´**\n\n{insights}",
                reply_markup=get_sales_menu_keyboard()
            )
        except Exception as e:
            await safe_edit_message(
                query=query,
                text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=get_sales_menu_keyboard()
            )
    
    elif data == "sales_analyze":
        if not CHATGPT_AVAILABLE:
            await safe_edit_message(
                query=query,
                text="‚ùå ChatGPT AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞.",
                reply_markup=get_sales_menu_keyboard()
            )
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞
        logging.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂...")
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂...")
        
        await safe_edit_message(
            query=query,
            text="üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            reply_markup=get_sales_menu_keyboard()
        )
        
        try:
            excel_path = os.path.join(os.path.dirname(__file__), EXCEL_FILE)
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - –Ω–µ –≤—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
            logging.info("üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º Excel —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            print("üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º Excel —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(excel_path):
                error_msg = "‚ùå Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
                logging.error("Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                print("Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await safe_edit_message(
                    query=query,
                    text=error_msg,
                    reply_markup=get_sales_menu_keyboard()
                )
                return
            
            logging.info("ü§ñ –í—ã–∑—ã–≤–∞–µ–º ChatGPT –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä...")
            print("ü§ñ –í—ã–∑—ã–≤–∞–µ–º ChatGPT –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä...")
            
            analysis = chatgpt_analyzer.analyze_sales_data(excel_path)
            
            logging.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞: {len(analysis)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞: {len(analysis)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            if len(analysis) > 4000:
                analysis = analysis[:4000] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"
                logging.info("‚úÇÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤")
                print("‚úÇÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã Markdown –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            safe_analysis = analysis.replace('*', '\\*').replace('_', '\\_').replace('[', '\\[').replace(']', '\\]')
            
            logging.info("üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞...")
            print("üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞...")
            
            await safe_edit_message(
                query=query,
                text=f"üìä **AI –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•**\n\n{safe_analysis}",
                reply_markup=get_sales_menu_keyboard()
            )
            
            logging.info("‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}"
            logging.error(error_msg)
            print(error_msg)
            await safe_edit_message(
                query=query,
                text=error_msg,
                reply_markup=get_sales_menu_keyboard()
            )
    
    elif data == "sales_profit":
        try:
            # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å –æ—Ç –ø—Ä–æ–¥–∞–∂ (–±–µ–∑ –æ—Ñ–∏—Å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤)
            net_profit_from_sales = get_net_profit_from_sales()
            office_expenses = get_office_expenses_total()
            
            # –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞ –º–µ—Å—è—Ü = —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –æ—Ç –ø—Ä–æ–¥–∞–∂ - –æ—Ñ–∏—Å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
            monthly_profit = net_profit_from_sales - office_expenses
            
            profit_text = f"üí∞ **–ü–†–ò–ë–´–õ–¨ –ó–ê –ú–ï–°–Ø–¶**\n\n"
            profit_text += f"üìä –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –æ—Ç –ø—Ä–æ–¥–∞–∂: {net_profit_from_sales:,.0f} —Ç–µ–Ω–≥–µ\n"
            profit_text += f"üè¢ –û—Ñ–∏—Å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {office_expenses:,.0f} —Ç–µ–Ω–≥–µ\n"
            profit_text += f"üí∏ –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞ –º–µ—Å—è—Ü: {monthly_profit:,.0f} —Ç–µ–Ω–≥–µ\n\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
            if net_profit_from_sales > 0:
                profitability = (monthly_profit / net_profit_from_sales * 100)
                profit_text += f"üìà –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: {profitability:.1f}%"
            else:
                profit_text += f"üìà –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: –ù/–î (–Ω–µ—Ç –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –ø—Ä–æ–¥–∞–∂)"
            
            await safe_edit_message(
                query=query,
                text=profit_text,
                reply_markup=get_sales_menu_keyboard()
            )
        except Exception as e:
            await safe_edit_message(
                query=query,
                text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=get_sales_menu_keyboard()
            )
    
    elif data == "sales_top":
        try:
            if not CHATGPT_AVAILABLE:
                await safe_edit_message(
                    query=query,
                    text="‚ùå ChatGPT AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–ø –ø—Ä–æ–¥–∞–∂.",
                    reply_markup=get_sales_menu_keyboard()
                )
                return
            
            excel_path = os.path.join(os.path.dirname(__file__), EXCEL_FILE)
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–æ–ø –ø—Ä–æ–¥–∞–∂
            top_analysis = chatgpt_analyzer.analyze_sales_data(excel_path, focus="top_sales")
            
            if len(top_analysis) > 4000:
                top_analysis = top_analysis[:4000] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"
            
            await safe_edit_message(
                query=query,
                text=f"üìã **–¢–û–ü –ü–†–û–î–ê–ñ–ò**\n\n{top_analysis}",
                reply_markup=get_sales_menu_keyboard()
            )
        except Exception as e:
            await safe_edit_message(
                query=query,
                text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=get_sales_menu_keyboard()
            )
    
    
    
    elif data == "sales_ai_recommendations":
        try:
            if not AI_RECOMMENDATIONS_AVAILABLE:
                await safe_edit_message(
                    query=query,
                    text="‚ùå AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.",
                    reply_markup=get_sales_menu_keyboard()
                )
                return
            
            recommendations = ai_recommendations.get_ai_recommendations("sales")
            await safe_edit_message(
                query=query,
                text=f"ü§ñ **AI –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ü–†–û–î–ê–ñ–ê–ú**\n\n{recommendations}",
                reply_markup=get_sales_menu_keyboard()
            )
        except Exception as e:
            await safe_edit_message(
                query=query,
                text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=get_sales_menu_keyboard()
            )
    
    elif data == "sales_trends":
        try:
            if not AI_RECOMMENDATIONS_AVAILABLE:
                await safe_edit_message(
                    query=query,
                    text="‚ùå –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
                    reply_markup=get_sales_menu_keyboard()
                )
                return
            
            trends = ai_recommendations.analyze_trends_and_patterns(6)
            if trends['status'] == 'success':
                text = f"üìà **–ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–û–í –ò –ó–ê–ö–û–ù–û–ú–ï–†–ù–û–°–¢–ï–ô**\n\n"
                text += f"üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {trends['analysis_period']}\n\n"
                
                if 'patterns' in trends and trends['patterns'].get('status') != 'error':
                    patterns = trends['patterns']
                    text += f"üìä **–í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏:**\n"
                    text += f"‚Ä¢ –¢—Ä–µ–Ω–¥ —Ä–æ—Å—Ç–∞: {patterns.get('growth_trend', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç: {patterns.get('avg_growth_rate', 0):.1f}%\n"
                    text += f"‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {patterns.get('stability', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
                
                if 'trends' in trends and trends['trends'].get('status') != 'error':
                    trends_data = trends['trends']
                    text += f"üìà **–¢—Ä–µ–Ω–¥—ã:**\n"
                    text += f"‚Ä¢ –ü—Ä–æ–¥–∞–∂–∏: {trends_data.get('sales_trend', {}).get('direction', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    text += f"‚Ä¢ –ó–∞–∫–∞–∑—ã: {trends_data.get('orders_trend', {}).get('direction', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {trends_data.get('avg_order_trend', {}).get('direction', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            else:
                text = f"‚ùå {trends.get('message', '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤')}"
            
            await safe_edit_message(
                query=query,
                text=text,
                reply_markup=get_sales_menu_keyboard()
            )
        except Exception as e:
            await safe_edit_message(
                query=query,
                text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=get_sales_menu_keyboard()
            )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"
    elif data == "sales_edit":
        await safe_edit_message(
            query=query,
            text="‚úèÔ∏è –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–• –ü–†–û–î–ê–ñ\n\n–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /edit –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ:\n\n‚Ä¢ '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É –Ω–æ–º–µ—Ä X'\n‚Ä¢ '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–¥–∞–∂—É'\n‚Ä¢ '–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–æ–º–µ—Ä X'\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É –Ω–æ–º–µ—Ä 5 - —Ü–µ–Ω–∞ 500000'\n‚Ä¢ '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É: –∫–ª–∏–µ–Ω—Ç –ò–≤–∞–Ω–æ–≤, –∫–æ—Ç–µ–ª alseit_25, —Ü–µ–Ω–∞ 400000'\n‚Ä¢ '–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–æ–º–µ—Ä 3'",
            reply_markup=get_sales_menu_keyboard(),
            parse_mode=None
        )
    
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –†–ê–ó–î–ï–õ–ê –ó–ê–†–ü–õ–ê–¢ ===
    elif data == "salary_update":
        try:
            result = update_salary()
            await safe_edit_message(
                query=query,
                text=f"üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–†–ü–õ–ê–¢\n\n{result}",
                reply_markup=get_salary_menu_keyboard(),
                parse_mode=None
            )
        except Exception as e:
            await safe_edit_message(
                query=query,
                text=f"‚ùå –û—à–∏–±–∫–∞: {e}",
                reply_markup=get_salary_menu_keyboard()
            )
    
    elif data == "salary_show":
        try:
            from salary_folder.salary_update import get_salary_summary
            result = get_salary_summary()
            await safe_edit_message(
                query=query,
                text=result,
                reply_markup=get_salary_menu_keyboard(),
                parse_mode=None
            )
        except Exception as e:
            await safe_edit_message(
                query=query,
                text=f"‚ùå –û—à–∏–±–∫–∞: {e}",
                reply_markup=get_salary_menu_keyboard()
            )
    
    elif data == "salary_monthly":
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–ø–ª–∞—Ç–∞—Ö –∑–∞ –º–µ—Å—è—Ü
            gross_profit = get_gross_profit()
            net_profit = get_net_profit()
            office_expenses = get_office_expenses_total()
            
            salary_text = f"üí∞ **–ó–ê–†–ü–õ–ê–¢–´ –ó–ê –ú–ï–°–Ø–¶**\n\n"
            salary_text += f"üìä –í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å: {gross_profit:,.0f} —Ç–µ–Ω–≥–µ\n"
            salary_text += f"üè¢ –û—Ñ–∏—Å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {office_expenses:,.0f} —Ç–µ–Ω–≥–µ\n"
            salary_text += f"üí∏ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {net_profit:,.0f} —Ç–µ–Ω–≥–µ\n\n"
            salary_text += f"üí° –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã –∑–∞—Ä–ø–ª–∞—Ç"
            
            await safe_edit_message(
                query=query,
                text=salary_text,
                reply_markup=get_salary_menu_keyboard()
            )
        except Exception as e:
            await safe_edit_message(
                query=query,
                text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=get_salary_menu_keyboard()
            )
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –†–ê–ó–î–ï–õ–ê –û–§–ò–°–ù–´–• –†–ê–°–•–û–î–û–í ===
    elif data == "office_show":
        try:
            summary = get_office_summary()
            await safe_edit_message(
                query=query,
                text=f"üè¢ **–û–§–ò–°–ù–´–ï –†–ê–°–•–û–î–´**\n\n{summary}",
                reply_markup=get_office_menu_keyboard()
            )
        except Exception as e:
            await safe_edit_message(
                query=query,
                text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=get_office_menu_keyboard()
            )
    
    elif data == "office_summary":
        try:
            summary = get_office_summary()
            await safe_edit_message(
                query=query,
                text=f"üìä **–°–í–û–î–ö–ê –û–§–ò–°–ù–´–• –†–ê–°–•–û–î–û–í**\n\n{summary}",
                reply_markup=get_office_menu_keyboard()
            )
        except Exception as e:
            await safe_edit_message(
                query=query,
                text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=get_office_menu_keyboard()
            )
    
    elif data == "office_profit":
        try:
            gross_profit = get_gross_profit()
            net_profit = get_net_profit()
            office_expenses = get_office_expenses_total()
            
            profit_text = f"üí∞ **–ü–†–ò–ë–´–õ–¨ –° –£–ß–ï–¢–û–ú –û–§–ò–°–ê**\n\n"
            profit_text += f"üìä –í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å: {gross_profit:,.0f} —Ç–µ–Ω–≥–µ\n"
            profit_text += f"üè¢ –û—Ñ–∏—Å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {office_expenses:,.0f} —Ç–µ–Ω–≥–µ\n"
            profit_text += f"üí∏ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {net_profit:,.0f} —Ç–µ–Ω–≥–µ\n\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
            if gross_profit > 0:
                efficiency = (net_profit / gross_profit * 100)
                profit_text += f"üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {efficiency:.1f}%"
            else:
                profit_text += f"üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –ù/–î (–Ω–µ—Ç –≤–∞–ª–æ–≤–æ–π –ø—Ä–∏–±—ã–ª–∏)"
            
            await safe_edit_message(
                query=query,
                text=profit_text,
                reply_markup=get_office_menu_keyboard()
            )
        except Exception as e:
            await safe_edit_message(
                query=query,
                text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=get_office_menu_keyboard()
            )
    
    elif data == "office_constants":
        try:
            result = add_office_constants()
            await safe_edit_message(
                query=query,
                text=f"üìã **–î–û–ë–ê–í–õ–ï–ù–ò–ï –û–§–ò–°–ù–´–• –ö–û–ù–°–¢–ê–ù–¢**\n\n{result}",
                reply_markup=get_office_menu_keyboard()
            )
        except Exception as e:
            await safe_edit_message(
                query=query,
                text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=get_office_menu_keyboard()
            )
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –û–§–ò–°–ù–´–• –†–ê–°–•–û–î–û–í ===
    elif data == "office_add_voice":
        await safe_edit_message(
            query=query,
            text="üé§ **–î–û–ë–ê–í–õ–ï–ù–ò–ï –û–§–ò–°–ù–û–ì–û –†–ê–°–•–û–î–ê**\n\n"
                 "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ä–∞—Å—Ö–æ–¥–∞.\n"
                 "–ù–∞–ø—Ä–∏–º–µ—Ä: \"–ö—É–ø–∏–ª –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—é –Ω–∞ 5000\" –∏–ª–∏ \"–û–ø–ª–∞—Ç–∏–ª –∏–Ω—Ç–µ—Ä–Ω–µ—Ç 25000\"",
            reply_markup=get_office_expenses_menu_keyboard()
        )
    
    elif data == "office_add_text":
        await safe_edit_message(
            query=query,
            text="‚úèÔ∏è **–î–û–ë–ê–í–õ–ï–ù–ò–ï –û–§–ò–°–ù–û–ì–û –†–ê–°–•–û–î–ê**\n\n"
                 "–ù–∞–ø–∏—à–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                 "‚Ä¢ \"5000 –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—è —Ä—É—á–∫–∏\"\n"
                 "‚Ä¢ \"25000 —Å–≤—è–∑—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç\"\n"
                 "‚Ä¢ \"15000 —É–±–æ—Ä–∫–∞ –æ—Ñ–∏—Å–∞\"",
            reply_markup=get_office_expenses_menu_keyboard()
        )
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –õ–ò–ß–ù–´–• –†–ê–°–•–û–î–û–í ===
    elif data == "personal_add_voice":
        await safe_edit_message(
            query=query,
            text="üé§ **–î–û–ë–ê–í–õ–ï–ù–ò–ï –õ–ò–ß–ù–û–ì–û –†–ê–°–•–û–î–ê**\n\n"
                 "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ä–∞—Å—Ö–æ–¥–∞.\n"
                 "–ù–∞–ø—Ä–∏–º–µ—Ä: \"–ü–æ—Ç—Ä–∞—Ç–∏–ª 5000 –≤ –∫–∞—Ñ–µ\" –∏–ª–∏ \"–ö—É–ø–∏–ª –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ 15000\"",
            reply_markup=get_personal_expenses_menu_keyboard()
        )
    
    elif data == "personal_add_text":
        await safe_edit_message(
            query=query,
            text="‚úèÔ∏è **–î–û–ë–ê–í–õ–ï–ù–ò–ï –õ–ò–ß–ù–û–ì–û –†–ê–°–•–û–î–ê**\n\n"
                 "–ù–∞–ø–∏—à–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                 "‚Ä¢ \"5000 –µ–¥–∞ –∫–∞—Ñ–µ\"\n"
                 "‚Ä¢ \"15000 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Ç–∞–∫—Å–∏\"\n"
                 "‚Ä¢ \"3000 —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–∏–Ω–æ\"",
            reply_markup=get_personal_expenses_menu_keyboard()
        )
    
    elif data == "personal_summary":
        if not EXPENSES_AVAILABLE:
            await safe_edit_message(
                query=query,
                text="‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                reply_markup=get_personal_expenses_menu_keyboard()
            )
        else:
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                personal_expense_manager.add_fixed_expenses_if_needed()
                summary = personal_expense_manager.get_monthly_summary()
                await safe_edit_message(
                    query=query,
                    text=summary,
                    reply_markup=get_personal_expenses_menu_keyboard()
                )
            except Exception as e:
                await safe_edit_message(
                    query=query,
                    text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                    reply_markup=get_personal_expenses_menu_keyboard()
                )
    
    elif data == "personal_categories":
        if not EXPENSES_AVAILABLE:
            await safe_edit_message(
                query=query,
                text="‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                reply_markup=get_personal_expenses_menu_keyboard()
            )
        else:
            try:
                summary = personal_expense_manager.get_category_breakdown()
                await safe_edit_message(
                    query=query,
                    text=summary,
                    reply_markup=get_personal_expenses_menu_keyboard()
                )
            except Exception as e:
                await safe_edit_message(
                    query=query,
                    text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                    reply_markup=get_personal_expenses_menu_keyboard()
                )
    
    elif data == "personal_recent":
        if not EXPENSES_AVAILABLE:
            await safe_edit_message(
                query=query,
                text="‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                reply_markup=get_personal_expenses_menu_keyboard()
            )
        else:
            try:
                recent = personal_expense_manager.get_recent_expenses()
                await safe_edit_message(
                    query=query,
                    text=recent,
                    reply_markup=get_personal_expenses_menu_keyboard()
                )
            except Exception as e:
                await safe_edit_message(
                    query=query,
                    text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                    reply_markup=get_personal_expenses_menu_keyboard()
                )
    
    elif data == "personal_weekly":
        if not EXPENSES_AVAILABLE:
            await safe_edit_message(
                query=query,
                text="‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                reply_markup=get_personal_expenses_menu_keyboard()
            )
        else:
            try:
                weekly = personal_expense_manager.get_weekly_summary()
                await safe_edit_message(
                    query=query,
                    text=weekly,
                    reply_markup=get_personal_expenses_menu_keyboard()
                )
            except Exception as e:
                await safe_edit_message(
                    query=query,
                    text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                    reply_markup=get_personal_expenses_menu_keyboard()
                )
    
    elif data == "personal_gpt_analysis":
        if not EXPENSES_AVAILABLE:
            await safe_edit_message(
                query=query,
                text="‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                reply_markup=get_personal_expenses_menu_keyboard()
            )
        else:
            try:
                analysis = personal_expense_manager.get_gpt_analysis()
                await safe_edit_message(
                    query=query,
                    text=analysis,
                    reply_markup=get_personal_expenses_menu_keyboard()
                )
            except Exception as e:
                await safe_edit_message(
                    query=query,
                    text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                    reply_markup=get_personal_expenses_menu_keyboard()
                )
    
    elif data == "personal_edit_last":
        if not EXPENSES_AVAILABLE:
            await safe_edit_message(
                query=query,
                text="‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                reply_markup=get_personal_expenses_menu_keyboard()
            )
        else:
            try:
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥: –º–µ–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å "–µ–¥–∞" –Ω–∞ "–∫–∞—Ñ–µ" –∏ —Å—É–º–º—É —Å 150 –Ω–∞ 150000
                success, message = personal_expense_manager.edit_last_expense(new_category="–∫–∞—Ñ–µ", new_amount=150000)
                await safe_edit_message(
                    query=query,
                    text=f"‚úèÔ∏è **–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–°–õ–ï–î–ù–ï–ì–û –†–ê–°–•–û–î–ê**\n\n{message}",
                    reply_markup=get_personal_expenses_menu_keyboard()
                )
            except Exception as e:
                await safe_edit_message(
                    query=query,
                    text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                    reply_markup=get_personal_expenses_menu_keyboard()
                )
    
    elif data == "personal_total":
        if not EXPENSES_AVAILABLE:
            await safe_edit_message(
                query=query,
                text="‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                reply_markup=get_personal_expenses_menu_keyboard()
            )
        else:
            try:
                summary = personal_expense_manager.get_monthly_summary()
                await safe_edit_message(
                    query=query,
                    text=summary,
                    reply_markup=get_personal_expenses_menu_keyboard()
                )
            except Exception as e:
                await safe_edit_message(
                    query=query,
                    text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                    reply_markup=get_personal_expenses_menu_keyboard()
                )
    
    
    elif data == "office_summary":
        if not EXPENSES_AVAILABLE:
            await safe_edit_message(
                query=query,
                text="‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                reply_markup=get_office_expenses_menu_keyboard()
            )
        else:
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                office_expense_manager.add_fixed_expenses_if_needed()
                summary = office_expense_manager.get_monthly_summary()
                await safe_edit_message(
                    query=query,
                    text=summary,
                    reply_markup=get_office_expenses_menu_keyboard()
                )
            except Exception as e:
                await safe_edit_message(
                    query=query,
                    text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                    reply_markup=get_office_expenses_menu_keyboard()
                )
    
    elif data == "office_categories":
        if not EXPENSES_AVAILABLE:
            await safe_edit_message(
                query=query,
                text="‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                reply_markup=get_office_expenses_menu_keyboard()
            )
        else:
            try:
                summary = office_expense_manager.get_category_breakdown()
                await safe_edit_message(
                    query=query,
                    text=summary,
                    reply_markup=get_office_expenses_menu_keyboard()
                )
            except Exception as e:
                await safe_edit_message(
                    query=query,
                    text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                    reply_markup=get_office_expenses_menu_keyboard()
                )
    
    elif data == "office_total":
        if not EXPENSES_AVAILABLE:
            await safe_edit_message(
                query=query,
                text="‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                reply_markup=get_office_expenses_menu_keyboard()
            )
        else:
            try:
                summary = office_expense_manager.get_monthly_summary()
                await safe_edit_message(
                    query=query,
                    text=summary,
                    reply_markup=get_office_expenses_menu_keyboard()
                )
            except Exception as e:
                await safe_edit_message(
                    query=query,
                    text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                    reply_markup=get_office_expenses_menu_keyboard()
                )
    
    elif data == "office_recent":
        if not EXPENSES_AVAILABLE:
            await safe_edit_message(
                query=query,
                text="‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                reply_markup=get_office_expenses_menu_keyboard()
            )
        else:
            try:
                recent = office_expense_manager.get_recent_expenses()
                await safe_edit_message(
                    query=query,
                    text=recent,
                    reply_markup=get_office_expenses_menu_keyboard()
                )
            except Exception as e:
                await safe_edit_message(
                    query=query,
                    text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                    reply_markup=get_office_expenses_menu_keyboard()
                )
    
    elif data == "office_weekly":
        if not EXPENSES_AVAILABLE:
            await safe_edit_message(
                query=query,
                text="‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                reply_markup=get_office_expenses_menu_keyboard()
            )
        else:
            try:
                weekly = office_expense_manager.get_weekly_summary()
                await safe_edit_message(
                    query=query,
                    text=weekly,
                    reply_markup=get_office_expenses_menu_keyboard()
                )
            except Exception as e:
                await safe_edit_message(
                    query=query,
                    text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                    reply_markup=get_office_expenses_menu_keyboard()
                )
    
    elif data == "office_gpt_analysis":
        if not EXPENSES_AVAILABLE:
            await safe_edit_message(
                query=query,
                text="‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                reply_markup=get_office_expenses_menu_keyboard()
            )
        else:
            try:
                analysis = office_expense_manager.get_gpt_analysis()
                await safe_edit_message(
                    query=query,
                    text=analysis,
                    reply_markup=get_office_expenses_menu_keyboard()
                )
            except Exception as e:
                await safe_edit_message(
                    query=query,
                    text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                    reply_markup=get_office_expenses_menu_keyboard()
                )
    
    elif data == "office_edit_last":
        if not EXPENSES_AVAILABLE:
            await safe_edit_message(
                query=query,
                text="‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                reply_markup=get_office_expenses_menu_keyboard()
            )
        else:
            try:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–∞—Å—Ö–æ–¥–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å
                recent = office_expense_manager.get_recent_expenses(limit=1)
                await safe_edit_message(
                    query=query,
                    text=f"‚úèÔ∏è **–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–°–õ–ï–î–ù–ï–ì–û –û–§–ò–°–ù–û–ì–û –†–ê–°–•–û–î–ê**\n\n{recent}\n\n–î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: '–∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ [–Ω–æ–≤–∞—è_–∫–∞—Ç–µ–≥–æ—Ä–∏—è]' –∏–ª–∏ '–∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å—É–º–º—É –Ω–∞ [–Ω–æ–≤–∞—è_—Å—É–º–º–∞]'",
                    reply_markup=get_office_expenses_menu_keyboard()
                )
            except Exception as e:
                await safe_edit_message(
                    query=query,
                    text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                    reply_markup=get_office_expenses_menu_keyboard()
                )

async def voice_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,
    —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä–µ—á—å –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã.
    
    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    
    Returns:
        None
    """
    if not VOICE_AVAILABLE:
        await update.message.reply_text(
            "‚ùå –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n\n"
            "üîß **–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –Ω—É–∂–Ω–æ:**\n"
            "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ffmpeg\n"
            "2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã\n\n"
            "üí° **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:**\n"
            "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–µ–∫—Å—Ç–æ–º\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é\n"
            "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
        )
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_message = await update.message.reply_text("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª
        voice_file = await update.message.voice.get_file()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        recognized_text = await voice_handler.process_voice_message(voice_file)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        if recognized_text.startswith("‚ùå"):
            # –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await processing_message.edit_text(recognized_text)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        await processing_message.edit_text(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: \"{recognized_text}\"")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
        command_data = voice_handler.parse_voice_command(recognized_text)
        
        if not command_data.get('success'):
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—É: {command_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        text_command = voice_handler.create_text_command(command_data)
        
        if not text_command:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ–∫—Å—Ç–æ–≤—É—é")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã
        await update.message.reply_text(f"ü§ñ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: \"{text_command}\"")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã –∏ –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        if command_data.get('action') == 'edit_order':
            # –ò–º–∏—Ç–∏—Ä—É–µ–º context.args –¥–ª—è edit_handler
            context.args = text_command.split()
            await command_handler.edit_command(update, context)
        elif command_data.get('action') == 'add_multiple_expenses':
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
            if EXPENSES_AVAILABLE:
                expenses = command_data.get('expenses', [])
                results = []
                
                for expense in expenses:
                    expense_type = expense.get('expense_type', 'personal')
                    amount = expense.get('amount', 0)
                    category = expense.get('category', '–¥—Ä—É–≥–æ–µ')
                    description = expense.get('description', '')
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞
                    expense_text = f"–ø–æ—Ç—Ä–∞—Ç–∏–ª {amount} –Ω–∞ {category}"
                    if description:
                        expense_text += f" ({description})"
                    
                    if expense_type == 'personal':
                        success, message = personal_expense_manager.add_expense_from_voice(expense_text)
                        results.append(f"üè† {message}")
                    else:  # office
                        success, message = office_expense_manager.add_expense_from_voice(expense_text)
                        results.append(f"üè¢ {message}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                await update.message.reply_text("\n".join(results))
            else:
                await update.message.reply_text("‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä—ã —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥
            # –°–æ–∑–¥–∞–µ–º Mock –æ–±—ä–µ–∫—Ç –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            class MockMessage:
                def __init__(self, text, original_message):
                    self.text = text
                    self.original_message = original_message
                    self.chat = original_message.chat
                    self.from_user = original_message.from_user
                    self.message_id = original_message.message_id
                    self.date = original_message.date
                    
                async def reply_text(self, text):
                    return await self.original_message.reply_text(text)
            
            class MockUpdate:
                def __init__(self, message):
                    self.message = message
                    self.update_id = update.update_id
                    self.effective_chat = update.effective_chat
                    self.effective_user = update.effective_user
            
            # –°–æ–∑–¥–∞–µ–º mock –æ–±—ä–µ–∫—Ç—ã
            mock_message = MockMessage(text_command, update.message)
            mock_update = MockUpdate(mock_message)
            
            await smart_message_handler(mock_update, context)
            
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = """
ü§ñ –§–ò–ù–ê–ù–°–û–í–´–ô –ë–û–¢ - –°–ü–†–ê–í–ö–ê

üìä –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:
‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ /update - –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—ã –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–æ–Ω—É—Å—ã
‚Ä¢ /analyze - –ø–æ–ª–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö (Gemini)
‚Ä¢ /insights - –±—ã—Å—Ç—Ä—ã–µ –∏–Ω—Å–∞–π—Ç—ã –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
‚Ä¢ /edit - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Excel (AI)
‚Ä¢ /refresh - –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel
‚Ä¢ /ask - –±—ã—Å—Ç—Ä—ã–π –≤–æ–ø—Ä–æ—Å –æ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞


‚å®Ô∏è –ö–õ–ê–í–ò–ê–¢–£–†–ê:
‚Ä¢ /show - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
‚Ä¢ /hide - —Å–∫—Ä—ã—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏

üîß –ù–ê–°–¢–†–û–ô–ö–ò:
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª Alseit.xlsx –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ —Å –±–æ—Ç–æ–º
‚Ä¢ –î–ª—è AI –∞–Ω–∞–ª–∏–∑–∞ –Ω—É–∂–µ–Ω GEMINI_API_KEY –≤ .env —Ñ–∞–π–ª–µ

üìà –ß–¢–û –î–ï–õ–ê–ï–¢ –ë–û–¢:
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ù–î–° (16%)
‚Ä¢ –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
‚Ä¢ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–æ–Ω—É—Å—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (5%) –∏ ROP (1%)
‚Ä¢ –°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–∫–∏ –≤ Excel
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é AI
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Excel —á–µ—Ä–µ–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Excel —Ñ–∞–π–ª–µ
‚Ä¢ –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –õ–Æ–ë–´–ï –≤–æ–ø—Ä–æ—Å—ã –æ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö!
‚Ä¢ –£–ø—Ä–∞–≤–ª—è–µ—Ç –ª–∏—á–Ω—ã–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–∏–º–∏—Ç–æ–≤

ü§ñ –ü–†–ò–ú–ï–†–´ –£–ú–ù–´–• –ó–ê–ü–†–û–°–û–í:
‚Ä¢ "–°–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ê–Ω–Ω–∞?"
‚Ä¢ "–ö–∞–∫–æ–π —Ç–æ–≤–∞—Ä –ø—Ä–∏–Ω–æ—Å–∏—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø—Ä–∏–±—ã–ª–∏?"
‚Ä¢ "–ü–æ–∫–∞–∂–∏ –≤—Å–µ –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞ –¢–û–û –°—Ç—Ä–æ–π"
‚Ä¢ "–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂ –≤ —è–Ω–≤–∞—Ä–µ"
‚Ä¢ "–°—Ä–∞–≤–Ω–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"
‚Ä¢ "–ù–∞–π–¥–∏ —Å–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ –∑–∞–∫–∞–∑—ã"
‚Ä¢ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏"

üí∞ –ü–†–ò–ú–ï–†–´ –õ–ò–ß–ù–´–• –†–ê–°–•–û–î–û–í:
‚Ä¢ "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ –µ–¥–∞ 5000 —Ä–µ—Å—Ç–æ—Ä–∞–Ω"
‚Ä¢ "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü"
‚Ä¢ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã —Ä–∞—Å—Ö–æ–¥–æ–≤"
‚Ä¢ "–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—è—á–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã"

üé§ –ì–û–õ–û–°–û–í–´–ï –ö–û–ú–ê–ù–î–´:
‚Ä¢ "–ò–∑–º–µ–Ω–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–ª–æ–≤ 3 —à—Ç—É–∫–∏ –≤ –Ω–æ–º–µ—Ä–µ –∑–∞–∫–∞–∑–∞ 2"
‚Ä¢ "–ü–æ–º–µ–Ω—è–π —Ü–µ–Ω—É –≤ –∑–∞–∫–∞–∑–µ 5 –Ω–∞ 50000"
‚Ä¢ "–ù–∞–∑–Ω–∞—á—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ò–≤–∞–Ω –≤ –∑–∞–∫–∞–∑–µ 3"
‚Ä¢ "–°–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ê–Ω–Ω–∞?"
‚Ä¢ "–ö–∞–∫–æ–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é?"

‚ö†Ô∏è –í–ê–ñ–ù–û: –î–ª—è —Ä–∞–±–æ—Ç—ã –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –Ω—É–∂–µ–Ω ffmpeg:
`conda install ffmpeg -c conda-forge`

üìù –ü–†–ò–ú–ï–†–´ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø:



‚Ä¢ /edit –∑–∞–∫–∞–∑ –Ω–æ–º–µ—Ä #2 –≤–º–µ—Å—Ç–æ –¥–≤—É—Ö –∫–æ—Ç–ª–æ–≤ –≤–∑—è–ª –æ–¥–∏–Ω
‚Ä¢ /edit –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ '–∫–æ—Ç–ª—ã' –≤ –∑–∞–∫–∞–∑–µ 5 —Å 3 –Ω–∞ 1
‚Ä¢ /edit –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ –∑–∞–∫–∞–∑–µ 1 –Ω–∞ 50000
‚Ä¢ /edit –Ω–∞–∑–Ω–∞—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ò–≤–∞–Ω –≤ –∑–∞–∫–∞–∑–µ 3


    """
    await update.message.reply_text(help_text)

async def smart_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –£–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏—Ö –Ω–∞–º–µ—Ä–µ–Ω–∏—è
    –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –∑–∞—Ç–µ–º –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É.
    
    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    
    Returns:
        None
    """
    message_text = update.message.text
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–æ–π
    if message_text in [
        "üìä –ü—Ä–æ–¥–∞–∂–∏", "üí∞ –ó–∞—Ä–ø–ª–∞—Ç—ã", "üè† –õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã", "üè¢ –û—Ñ–∏—Å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã",
        "üìà –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", 
        "‚ùì –ü–æ–º–æ—â—å", "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    ]:
        await handle_reply_buttons(update, context)
        return
    
    # –ï—Å–ª–∏ –Ω–µ –∫–Ω–æ–ø–∫–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text_lower = message_text.lower()
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    edit_keywords = [
        '–∏–∑–º–µ–Ω–∏—Ç—å', '–∏–∑–º–µ–Ω–µ–Ω–∏–µ', '–ø–æ–º–µ–Ω—è—Ç—å', '–∏—Å–ø—Ä–∞–≤–∏—Ç—å', '–æ–±–Ω–æ–≤–∏—Ç—å',
        '–∑–∞–∫–∞–∑', '–∑–∞–∫–∞–∑–µ', '–∫–æ—Ç–µ–ª', '–∫–æ—Ç–ª—ã', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '—Ü–µ–Ω–∞', '—Ü–µ–Ω—É',
        '–≤–º–µ—Å—Ç–æ', '–≤–∑—è–ª', '–∑–∞–∫–∞–∑–∞–ª', '–Ω—É–∂–Ω–æ', '–Ω–∞–¥–æ', '–º–µ–Ω–µ–¥–∂–µ—Ä', '–º–µ–Ω–µ–¥–∂–µ—Ä–∞'
    ]
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    analysis_keywords = [
        '–∞–Ω–∞–ª–∏–∑', '–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–¥–∞–Ω–Ω—ã–µ',
        '–ø—Ä–æ–¥–∞–∂–∏', '–≤—ã—Ä—É—á–∫–∞', '–ø—Ä–∏–±—ã–ª—å', '–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏'
    ]
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    report_keywords = [
        '–æ—Ç—á–µ—Ç', '–æ—Ç—á—ë—Ç', '–Ω–µ–¥–µ–ª—è', '–º–µ—Å—è—Ü', '–ø–µ—Ä–∏–æ–¥', '—Å–≤–æ–¥–∫–∞ –∑–∞',
        '–∏—Ç–æ–≥–∏ –∑–∞', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞'
    ]
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∏–Ω—Å–∞–π—Ç–æ–≤
    insights_keywords = [
        '–∏–Ω—Å–∞–π—Ç—ã', '–±—ã—Å—Ç—Ä–æ', '–∫—Ä–∞—Ç–∫–æ', '—Å–≤–æ–¥–∫–∞', '–∏—Ç–æ–≥–∏'
    ]
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç
    update_keywords = [
        '–æ–±–Ω–æ–≤–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—ã', '–∑–∞—Ä–ø–ª–∞—Ç–∞', '–±–æ–Ω—É—Å', '—Ä–∞—Å—á–µ—Ç', '–ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å'
    ]
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
    personal_expense_keywords = [
        '–ø–æ—Ç—Ä–∞—Ç–∏–ª', '–∫—É–ø–∏–ª', '–∑–∞–ø–ª–∞—Ç–∏–ª', '–ø–æ—Ç—Ä–∞—Ç–∏–ª–∞', '–∫—É–ø–∏–ª–∞', '–∑–∞–ø–ª–∞—Ç–∏–ª–∞',
        '–µ–¥–∞', '–∫–∞—Ñ–µ', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–ø—Ä–æ–¥—É–∫—Ç—ã', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '—Ç–∞–∫—Å–∏', '–±–µ–Ω–∑–∏–Ω',
        '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '–∫–∏–Ω–æ', '–∏–≥—Ä—ã', '–æ–¥–µ–∂–¥–∞', '–∑–¥–æ—Ä–æ–≤—å–µ', '–ª–µ–∫–∞—Ä—Å—Ç–≤–∞',
        '–ª–∏—á–Ω—ã–π —Ä–∞—Å—Ö–æ–¥', '–ª–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã'
    ]
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ—Ñ–∏—Å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
    office_expense_keywords = [
        '–∫–∞–Ω—Ü–µ–ª—è—Ä–∏—è', '—Ä—É—á–∫–∏', '–±—É–º–∞–≥–∞', '–ø—Ä–∏–Ω—Ç–µ—Ä', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç',
        '—Å–≤—è–∑—å', '—É–±–æ—Ä–∫–∞', '–∫–ª–∏–Ω–∏–Ω–≥', '—Ä–µ–º–æ–Ω—Ç', '–∞—Ä–µ–Ω–¥–∞ –æ—Ñ–∏—Å–∞', '–æ—Ñ–∏—Å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥',
        '–æ—Ñ–∏—Å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã', '–æ—Ñ–∏—Å'
    ]
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∞
    plan_keywords = [
        '–ø–ª–∞–Ω', '–ø–ª–∞–Ω–∏—Ä—É—é', '—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω', '–ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω', '–ø–ª–∞–Ω –Ω–∞',
        '—è–Ω–≤–∞—Ä—å', '—Ñ–µ–≤—Ä–∞–ª—å', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª—å', '–º–∞–π', '–∏—é–Ω—å', '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç',
        '—Å–µ–Ω—Ç—è–±—Ä—å', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å', '–º–ª–Ω', '—Ç—ã—Å—è—á', '–∫'
    ]
    
    
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    edit_matches = sum(1 for keyword in edit_keywords if keyword in message_text_lower)
    analysis_matches = sum(1 for keyword in analysis_keywords if keyword in message_text_lower)
    report_matches = sum(1 for keyword in report_keywords if keyword in message_text_lower)
    insights_matches = sum(1 for keyword in insights_keywords if keyword in message_text_lower)
    update_matches = sum(1 for keyword in update_keywords if keyword in message_text_lower)
    personal_expense_matches = sum(1 for keyword in personal_expense_keywords if keyword in message_text_lower)
    office_expense_matches = sum(1 for keyword in office_expense_keywords if keyword in message_text_lower)
    plan_matches = sum(1 for keyword in plan_keywords if keyword in message_text_lower)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    if message_text in ["üë§ –õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã", "üè¢ –û—Ñ–∏—Å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã", "üìä –ü—Ä–æ–¥–∞–∂–∏", "üí∞ –ó–∞—Ä–ø–ª–∞—Ç—ã"]:
        # –≠—Ç–æ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ button_callback_handler
        if message_text == "üë§ –õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã":
            await update.message.reply_text("üè† **–õ–ò–ß–ù–´–ï –†–ê–°–•–û–î–´**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_personal_expenses_menu_keyboard())
        elif message_text == "üè¢ –û—Ñ–∏—Å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã":
            await update.message.reply_text("üè¢ **–û–§–ò–°–ù–´–ï –†–ê–°–•–û–î–´**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_office_expenses_menu_keyboard())
        elif message_text == "üìä –ü—Ä–æ–¥–∞–∂–∏":
            # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–¥–∞–∂
            await command_handler.analyze_command(update, context)
        elif message_text == "üí∞ –ó–∞—Ä–ø–ª–∞—Ç—ã":
            await update.message.reply_text("üí∞ **–ó–ê–†–ü–õ–ê–¢–´**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_salary_menu_keyboard())
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
    if edit_matches >= 2:  # –ï—Å–ª–∏ –µ—Å—Ç—å –º–∏–Ω–∏–º—É–º 2 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await update.message.reply_text("ü§ñ –ü–æ–Ω—è–ª, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º context.args –¥–ª—è edit_handler
        context.args = update.message.text.split()
        await command_handler.edit_command(update, context)
        
        
    elif report_matches >= 1:
        await update.message.reply_text("üìä –ü–æ–Ω—è–ª, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—á–µ—Ç. –ì–µ–Ω–µ—Ä–∏—Ä—É—é...")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–æ–≤
        
    elif analysis_matches >= 1:
        await update.message.reply_text("ü§ñ –ü–æ–Ω—è–ª, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑. –ó–∞–ø—É—Å–∫–∞—é...")
        await command_handler.analyze_command(update, context)
        
    elif insights_matches >= 1:
        await update.message.reply_text("ü§ñ –ü–æ–Ω—è–ª, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–Ω—Å–∞–π—Ç—ã. –ü–æ–ª—É—á–∞—é...")
        await command_handler.insights_command(update, context)
        
    elif update_matches >= 1:
        await update.message.reply_text("ü§ñ –ü–æ–Ω—è–ª, —á—Ç–æ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—ã. –í—ã–ø–æ–ª–Ω—è—é...")
        await command_handler.update_salary_command(update, context)
        
    elif personal_expense_matches >= 1:
        await update.message.reply_text("üè† –ü–æ–Ω—è–ª, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–∏—á–Ω—ã–π —Ä–∞—Å—Ö–æ–¥. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
        if EXPENSES_AVAILABLE:
            success, message = personal_expense_manager.add_expense_from_voice(message_text)
            await update.message.reply_text(f"üè† {message}")
        else:
            await update.message.reply_text("‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä –ª–∏—á–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
    elif office_expense_matches >= 1:
        await update.message.reply_text("üè¢ –ü–æ–Ω—è–ª, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ñ–∏—Å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
        if EXPENSES_AVAILABLE:
            success, message = office_expense_manager.add_expense_from_voice(message_text)
            await update.message.reply_text(f"üè¢ {message}")
        else:
            await update.message.reply_text("‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ñ–∏—Å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
    else:
        # –ï—Å–ª–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –Ω–µ—è—Å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        if CHATGPT_AVAILABLE and len(update.message.text.split()) >= 3:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ –∏ ChatGPT –¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–±—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            await update.message.reply_text("ü§î –ü–æ–ø—Ä–æ–±—É—é —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ...")
            await command_handler.ask_command(update, context)
        else:
            # –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
            await update.message.reply_text(
                f"ü§ñ –ü–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: \"{update.message.text}\"\n\n"
                f"üí° **–ù–û–í–û–ï**: –¢–µ–ø–µ—Ä—å —è –ø–æ–Ω–∏–º–∞—é –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –¥–∞–Ω–Ω—ã—Ö!\n\n"
                f"–ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≥–æ, —á—Ç–æ —è –º–æ–≥—É:\n"
                f"‚Ä¢ \"–°–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ò–≤–∞–Ω?\"\n"
                f"‚Ä¢ \"–ö–∞–∫–æ–π —Ç–æ–≤–∞—Ä —Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π?\"\n"
                f"‚Ä¢ \"–ü–æ–∫–∞–∂–∏ –∑–∞–∫–∞–∑—ã –±–æ–ª—å—à–µ 100000 —Ç–µ–Ω–≥–µ\"\n"
                f"‚Ä¢ \"–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂ –∑–∞ –Ω–µ–¥–µ–ª—é\"\n"
                f"‚Ä¢ \"–°—Ä–∞–≤–Ω–∏ –ø—Ä–æ–¥–∞–∂–∏ —Ä–∞–∑–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤\"\n\n"
                f"üìã –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                f"üìù /edit - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ\n"
                f"üìä /analyze - –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n"
                f"‚ö° /insights - –±—ã—Å—Ç—Ä–∞—è —Å–≤–æ–¥–∫–∞\n"
                f"üîÑ /refresh - –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n"
                f"‚ùì /help - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞"
            )

async def handle_reply_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    message_text = update.message.text
    
    if message_text == "üìä –ü—Ä–æ–¥–∞–∂–∏":
        await update.message.reply_text(
            "üìä **–ü–†–û–î–ê–ñ–ò**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_sales_menu_keyboard()
        )
    
    elif message_text == "üí∞ –ó–∞—Ä–ø–ª–∞—Ç—ã":
        await update.message.reply_text(
            "üí∞ **–ó–ê–†–ü–õ–ê–¢–´**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_salary_menu_keyboard()
        )
    
    elif message_text == "üè† –õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã":
        await update.message.reply_text(
            "üè† **–õ–ò–ß–ù–´–ï –†–ê–°–•–û–î–´**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_personal_expenses_menu_keyboard()
        )
    
    elif message_text == "üè¢ –û—Ñ–∏—Å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã":
        await update.message.reply_text(
            "üè¢ **–û–§–ò–°–ù–´–ï –†–ê–°–•–û–î–´**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_office_expenses_menu_keyboard()
        )
    
    
    elif message_text == "üìà –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
        await update.message.reply_text("ü§ñ –ó–∞–ø—É—Å–∫–∞—é –ø–æ–ª–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...")
        await command_handler.analyze_command(update, context)
    
    elif message_text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ":
        await update.message.reply_text(
            "‚úèÔ∏è **–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–•**\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ \"–í –∑–∞–∫–∞–∑–µ ‚Ññ2 –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–ª–æ–≤ —Å 2 –Ω–∞ 1\"\n"
            "‚Ä¢ \"–ü–æ–º–µ–Ω—è—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ –∑–∞–∫–∞–∑–µ ‚Ññ5 –Ω–∞ –ê–π–¥–∞–Ω—É\"\n"
            "‚Ä¢ \"–û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –≤ –∑–∞–∫–∞–∑–µ ‚Ññ1 –Ω–∞ 50000\"\n\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /edit"
        )
    
    elif message_text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        await command_handler.refresh_command(update, context)
    
    elif message_text == "‚ùì –ü–æ–º–æ—â—å":
        await command_handler.help_command(update, context)
    
    elif message_text == "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await command_handler.start_command(update, context)
    
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ smart_message_handler
        pass

async def hide_keyboard_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫—Ä—ã–≤–∞–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    await update.message.reply_text(
        "‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.",
        reply_markup=ReplyKeyboardMarkup([], resize_keyboard=True, one_time_keyboard=True)
    )

async def show_keyboard_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    await update.message.reply_text(
        "‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!",
        reply_markup=get_main_reply_keyboard()
    )

def main():
    from config import LOGGING_CONFIG, BOT_SETTINGS, FILE_PATHS
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        format=LOGGING_CONFIG['format'],
        level=getattr(logging, LOGGING_CONFIG['level']),
        handlers=[
            logging.StreamHandler(),  # –í—ã–≤–æ–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
            logging.FileHandler(FILE_PATHS['log_file'], encoding='utf-8')  # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
        ]
    )
    
    # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è telegram
    logging.getLogger("telegram").setLevel(logging.INFO)
    logging.getLogger("httpx").setLevel(logging.INFO)
    
    app = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", command_handler.start_command))
    app.add_handler(CommandHandler("update", command_handler.update_salary_command))
    app.add_handler(CommandHandler("analyze", command_handler.analyze_command))
    app.add_handler(CommandHandler("insights", command_handler.insights_command))
    app.add_handler(CommandHandler("edit", command_handler.edit_command))
    app.add_handler(CommandHandler("refresh", command_handler.refresh_command))
    app.add_handler(CommandHandler("ask", command_handler.ask_command))
    app.add_handler(CommandHandler("help", command_handler.help_command))
    app.add_handler(CommandHandler("hide", hide_keyboard_handler))
    app.add_handler(CommandHandler("show", show_keyboard_handler))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–≤–∫–ª–∞–¥–∫–∏)
    app.add_handler(CallbackQueryHandler(button_callback_handler))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.VOICE, voice_message_handler))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–æ–ø–æ–∫)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, smart_message_handler))

    chatgpt_status = "‚úÖ ChatGPT AI –¥–æ—Å—Ç—É–ø–µ–Ω" if CHATGPT_AVAILABLE else "‚ö†Ô∏è ChatGPT AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    voice_status = "‚úÖ –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã" if VOICE_AVAILABLE else "‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    print(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    print(f"üìä {chatgpt_status}")
    print(f"üé§ {voice_status}")
    print(f"üìÅ Excel —Ñ–∞–π–ª: {FILE_PATHS['excel_file']}")
    print(f"üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ - –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª –∏ {FILE_PATHS['log_file']}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ polling
    app.run_polling(
        drop_pending_updates=True,
        **BOT_SETTINGS
    )

if __name__ == "__main__":
    main()