"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
"""
import pandas as pd
import time
import os
from typing import Optional, Dict, Any, List
from config import COLUMN_MAPPINGS, CACHE_DURATION

class DataCache:
    """–£–º–Ω—ã–π –∫—ç—à –¥–ª—è Excel –¥–∞–Ω–Ω—ã—Ö —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–∞"""
    def __init__(self):
        self._cache = {}
        self._timestamps = {}
        self._file_mod_times = {}  # –í—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
    
    def _get_file_mod_time(self, file_path: str) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞"""
        try:
            return os.path.getmtime(file_path)
        except OSError:
            return 0.0
    
    def get(self, file_path: str, sheet_name: str) -> Optional[pd.DataFrame]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–∞"""
        key = f"{file_path}:{sheet_name}"
        
        if key not in self._cache:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
        current_mod_time = self._get_file_mod_time(file_path)
        cached_mod_time = self._file_mod_times.get(file_path, 0)
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
        if current_mod_time > cached_mod_time:
            self._clear_file_cache(file_path)
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ –∫—ç—à –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        if time.time() - self._timestamps[key] > CACHE_DURATION:
            del self._cache[key]
            del self._timestamps[key]
            return None
        
        return self._cache[key]
    
    def set(self, file_path: str, sheet_name: str, data: pd.DataFrame):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à"""
        key = f"{file_path}:{sheet_name}"
        self._cache[key] = data.copy()
        self._timestamps[key] = time.time()
        self._file_mod_times[file_path] = self._get_file_mod_time(file_path)
    
    def _clear_file_cache(self, file_path: str):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        keys_to_remove = [key for key in self._cache.keys() if key.startswith(f"{file_path}:")]
        for key in keys_to_remove:
            del self._cache[key]
            del self._timestamps[key]
        
        if file_path in self._file_mod_times:
            del self._file_mod_times[file_path]
    
    def clear(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à"""
        self._cache.clear()
        self._timestamps.clear()
        self._file_mod_times.clear()
    
    def refresh_file(self, file_path: str):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à –¥–ª—è —Ñ–∞–π–ª–∞"""
        self._clear_file_cache(file_path)
    
    def get_cache_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫—ç—à–∞"""
        return {
            'cached_files': list(set(key.split(':')[0] for key in self._cache.keys())),
            'cache_size': len(self._cache),
            'file_mod_times': self._file_mod_times.copy()
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
data_cache = DataCache()

def find_column(df: pd.DataFrame, column_type: str) -> Optional[str]:
    """
    –ù–∞–π—Ç–∏ –∫–æ–ª–æ–Ω–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –≤ DataFrame
    
    Args:
        df: DataFrame –¥–ª—è –ø–æ–∏—Å–∫–∞
        column_type: –¢–∏–ø –∫–æ–ª–æ–Ω–∫–∏ ('price', 'manager', 'rop', etc.)
    
    Returns:
        –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏ –∏–ª–∏ None
    """
    if column_type not in COLUMN_MAPPINGS:
        return None
    
    possible_columns = COLUMN_MAPPINGS[column_type]
    
    for col in possible_columns:
        if col in df.columns:
            return col
    
    return None

def load_excel_with_cache(file_path: str, sheet_name: str) -> pd.DataFrame:
    """
    –ó–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞
    
    Args:
        file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        sheet_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
    
    Returns:
        DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
    """
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    cached_data = data_cache.get(file_path, sheet_name)
    if cached_data is not None:
        return cached_data
    
    # –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç, —á–∏—Ç–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
    try:
        data = pd.read_excel(file_path, sheet_name=sheet_name)
        data_cache.set(file_path, sheet_name, data)
        return data
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞ {file_path}, –ª–∏—Å—Ç {sheet_name}: {str(e)}")

def validate_excel_structure(df: pd.DataFrame, required_columns: List[str]) -> List[str]:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É DataFrame –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    
    Args:
        df: DataFrame –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        required_columns: –°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–ª–æ–Ω–æ–∫
    
    Returns:
        –°–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
    """
    missing = []
    
    for col_type in required_columns:
        if find_column(df, col_type) is None:
            missing.append(col_type)
    
    return missing

def clean_numeric_data(df: pd.DataFrame, column: str) -> pd.Series:
    """
    –û—á–∏—Å—Ç–∏—Ç—å —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–ª–æ–Ω–∫–µ
    
    Args:
        df: DataFrame
        column: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    
    Returns:
        –û—á–∏—â–µ–Ω–Ω–∞—è Series —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    return pd.to_numeric(df[column], errors='coerce').dropna()

def split_message_if_long(text: str, max_length: int = 4000) -> List[str]:
    """
    –†–∞–∑–±–∏—Ç—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —á–∞—Å—Ç–∏
    
    Returns:
        –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    if len(text) <= max_length:
        return [text]
    
    parts = []
    for i in range(0, len(text), max_length):
        parts.append(text[i:i + max_length])
    
    return parts

# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–†–ò–ë–´–õ–¨–Æ ===

def get_gross_profit(excel_file_path: str = None) -> float:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–±—ã–ª—å –∑–∞ –º–µ—Å—è—Ü (—á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –æ—Ç –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–∂ - –æ—Ñ–∏—Å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã)
    
    Args:
        excel_file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
    
    Returns:
        –ü—Ä–∏–±—ã–ª—å –∑–∞ –º–µ—Å—è—Ü –≤ —Ç–µ–Ω–≥–µ
    """
    try:
        if excel_file_path is None:
            excel_file_path = os.path.join(os.path.dirname(__file__), "Alseit.xlsx")
        
        print(f"üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑: {excel_file_path}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
        sales_df = load_excel_with_cache(excel_file_path, '–ø—Ä–æ–¥–∞–∂–∏')
        
        if sales_df.empty:
            print("‚ùå –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –ø—É—Å—Ç—ã")
            return 0.0
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
        current_date = pd.Timestamp.now()
        current_month = current_date.month
        current_year = current_date.year
        
        print(f"üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date.strftime('%Y-%m-%d')}")
        print(f"üìÖ –ò—â–µ–º –ø—Ä–æ–¥–∞–∂–∏ –∑–∞: {current_month}.{current_year}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü (–∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã DD.MM.YYYY)
        sales_df['date'] = pd.to_datetime(sales_df['date'], errors='coerce')
        monthly_sales = sales_df[
            (sales_df['date'].dt.month == current_month) & 
            (sales_df['date'].dt.year == current_year)
        ]
        
        if monthly_sales.empty:
            print("‚ùå –ù–µ—Ç –ø—Ä–æ–¥–∞–∂ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü")
            return 0.0
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥–∞–∂ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {len(monthly_sales)}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∏—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å –æ—Ç –∫–∞–∂–¥–æ–π –ø—Ä–æ–¥–∞–∂–∏
        total_net_profit = 0.0
        
        for idx, row in monthly_sales.iterrows():
            boiler_name = str(row.get('boiler_name', '')).strip()  # –û—á–∏—â–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
            price = row.get('price', 0)
            quantity = row.get('quantity', 1)
            payment_method = row.get('payment_method', '–Ω–∞–ª–∏—á–Ω—ã–µ')
            accessories = row.get('accessories', 0)
            purchase = row.get('purchase', 0)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–∫—É–ø–æ—á–Ω—É—é —Ü–µ–Ω—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            
            if pd.isna(boiler_name) or boiler_name == '' or boiler_name == 'nan':
                continue
                
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–ª–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–æ–Ω—É—Å–æ–≤
            from salary_folder.salary_update import BOILER_PRICES, LOW_DEDUCTION_BOILERS, LOW_DEDUCTION_AMOUNT, HIGH_DEDUCTION_AMOUNT, MANAGER_BONUS_RATE, BANK_TAX_RATE
            
            if boiler_name not in BOILER_PRICES:
                print(f"‚ö†Ô∏è –ö–æ—Ç–µ–ª {boiler_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ BOILER_PRICES")
                continue
                
            boiler_data = BOILER_PRICES[boiler_name]
            boiler_price = boiler_data['price']
            
            if boiler_price == 0:
                continue
            
            # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–¥–∞–∂)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
            try:
                price = float(price) if pd.notna(price) else 0
                quantity = float(quantity) if pd.notna(quantity) else 1
                purchase = float(purchase) if pd.notna(purchase) else 0
                accessories = float(accessories) if pd.notna(accessories) else 0
            except (ValueError, TypeError):
                print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {boiler_name}: price={price}, quantity={quantity}")
                continue
                
            total_price = price * quantity
            total_purchase = purchase * quantity
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–æ–Ω—É—Å–æ–≤
            if boiler_name in LOW_DEDUCTION_BOILERS:
                delivery_for_bonus = LOW_DEDUCTION_AMOUNT  # 50,000
            else:
                delivery_for_bonus = HIGH_DEDUCTION_AMOUNT  # 100,000
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            manager_bonus = (total_price - delivery_for_bonus) * MANAGER_BONUS_RATE
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∏—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å –æ—Ç —ç—Ç–æ–π –ø—Ä–æ–¥–∞–∂–∏
            profit = total_price
            
            # –í—ã—á–∏—Ç–∞–µ–º 12% –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –±–∞–Ω–∫
            if payment_method in ['–±–∞–Ω–∫', 'kaspi_pay', 'kaspi_magazine']:
                bank_tax = total_price * BANK_TAX_RATE
                profit -= bank_tax
            
            # –í—ã—á–∏—Ç–∞–µ–º 4% –Ω–∞–ª–æ–≥
            tax_4_percent = total_price * 0.04
            profit -= tax_4_percent
            
            # –í—ã—á–∏—Ç–∞–µ–º –±–æ–Ω—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            profit -= manager_bonus
            
            # –í—ã—á–∏—Ç–∞–µ–º –∑–∞–∫—É–ø–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
            profit -= total_purchase
            
            # –í—ã—á–∏—Ç–∞–µ–º –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã
            profit -= accessories
            
            total_net_profit += profit
            
            print(f"üîß {boiler_name}: —Ü–µ–Ω–∞={total_price:,.0f}, –∑–∞–∫—É–ø–∫–∞={total_purchase:,.0f}, –ø—Ä–∏–±—ã–ª—å={profit:,.0f}")
        
        print(f"üí∞ –û–±—â–∞—è —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –æ—Ç –ø—Ä–æ–¥–∞–∂: {total_net_profit:,.0f} —Ç–µ–Ω–≥–µ")
        
        # –û—Ç–Ω–∏–º–∞–µ–º –æ—Ñ–∏—Å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
        office_expenses = get_office_expenses_total()
        print(f"üè¢ –û—Ñ–∏—Å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {office_expenses:,.0f} —Ç–µ–Ω–≥–µ")
        
        final_profit = total_net_profit - office_expenses
        print(f"üí∏ –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞ –º–µ—Å—è—Ü: {final_profit:,.0f} —Ç–µ–Ω–≥–µ")
        
        return max(0.0, final_profit)  # –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏ –∑–∞ –º–µ—Å—è—Ü: {e}")
        import traceback
        traceback.print_exc()
        return 0.0

def get_net_profit_from_sales(excel_file_path: str = None) -> float:
    """–ü–æ–ª—É—á–∏—Ç—å —á–∏—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å –æ—Ç –ø—Ä–æ–¥–∞–∂ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü (–ë–ï–ó –≤—ã—á–µ—Ç–∞ –æ—Ñ–∏—Å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤)"""
    try:
        if excel_file_path is None:
            excel_file_path = os.path.join(os.path.dirname(__file__), "Alseit.xlsx")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        from salary_folder.salary_update import BOILER_PRICES, LOW_DEDUCTION_BOILERS, LOW_DEDUCTION_AMOUNT, HIGH_DEDUCTION_AMOUNT, MANAGER_BONUS_RATE, BANK_TAX_RATE
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
        sales_df = load_excel_with_cache(excel_file_path, '–ø—Ä–æ–¥–∞–∂–∏')
        
        if sales_df.empty:
            print("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö")
            return 0.0
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–º–µ—à–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã)
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
        processed_dates = []
        for date_val in sales_df['date']:
            if pd.isna(date_val):
                processed_dates.append(pd.NaT)
            elif isinstance(date_val, pd.Timestamp):
                # –£–∂–µ datetime –æ–±—ä–µ–∫—Ç
                processed_dates.append(date_val)
            else:
                # –°—Ç—Ä–æ–∫–∞, –Ω—É–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å
                date_str = str(date_val)
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ –≤ –¥–∞—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09.009.2025 -> 09.09.2025)
                import re
                date_str = re.sub(r'\.0+(\d)\.', r'.\1.', date_str)
                try:
                    parsed_date = pd.to_datetime(date_str, format='%d.%m.%Y', errors='coerce')
                    processed_dates.append(parsed_date)
                except:
                    processed_dates.append(pd.NaT)
        
        sales_df['date'] = processed_dates
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
        current_date = pd.Timestamp.now()
        current_month = current_date.month
        current_year = current_date.year
        
        print(f"üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date.strftime('%Y-%m-%d')}")
        print(f"üìÖ –ò—â–µ–º –ø—Ä–æ–¥–∞–∂–∏ –∑–∞: {current_month}.{current_year}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        current_month_sales = sales_df[
            (sales_df['date'].dt.month == current_month) & 
            (sales_df['date'].dt.year == current_year)
        ]
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥–∞–∂ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {len(current_month_sales)}")
        
        total_net_profit = 0.0
        
        for _, row in current_month_sales.iterrows():
            boiler_name = str(row.get('boiler_name', '')).strip()
            
            if not boiler_name or boiler_name == 'nan' or boiler_name not in BOILER_PRICES:
                continue
                
            boiler_data = BOILER_PRICES[boiler_name]
            boiler_price = boiler_data['price']
            
            if boiler_price == 0:
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
            price = row.get('price', 0)
            quantity = row.get('quantity', 1)
            purchase = row.get('purchase', 0)
            accessories = row.get('accessories', 0)
            payment_method = str(row.get('payment_method', '–Ω–∞–ª–∏—á–Ω—ã–µ')).strip().lower()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º payment_method
            if payment_method in ['–Ω–∞–ª', '–Ω–∞–ª–∏—á–Ω—ã–µ', '–Ω–∞–ª–∏—á–∫–∞', 'cash']:
                payment_method = '–Ω–∞–ª–∏—á–Ω—ã–µ'
            elif payment_method in ['–±–∞–Ω–∫', '–±–∞–Ω–∫–æ–≤—Å–∫–∏–π', '–∫–∞—Ä—Ç–∞', 'bank', 'card']:
                payment_method = '–±–∞–Ω–∫'
            else:
                payment_method = '–Ω–∞–ª–∏—á–Ω—ã–µ'
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
            try:
                price = float(price) if pd.notna(price) else 0
                quantity = float(quantity) if pd.notna(quantity) else 1
                purchase = float(purchase) if pd.notna(purchase) else 0
                accessories = float(accessories) if pd.notna(accessories) else 0
            except (ValueError, TypeError):
                print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {boiler_name}: price={price}, quantity={quantity}")
                continue
                
            total_price = price * quantity
            total_purchase = purchase * quantity
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–æ–Ω—É—Å–æ–≤
            if boiler_name in LOW_DEDUCTION_BOILERS:
                delivery_for_bonus = LOW_DEDUCTION_AMOUNT  # 50,000
            else:
                delivery_for_bonus = HIGH_DEDUCTION_AMOUNT  # 100,000
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            manager_bonus = (total_price - delivery_for_bonus) * MANAGER_BONUS_RATE
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∏—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å –æ—Ç —ç—Ç–æ–π –ø—Ä–æ–¥–∞–∂–∏
            profit = total_price
            
            # –í—ã—á–∏—Ç–∞–µ–º 12% –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –±–∞–Ω–∫
            if payment_method in ['–±–∞–Ω–∫', 'kaspi_pay', 'kaspi_magazine']:
                bank_tax = total_price * BANK_TAX_RATE
                profit -= bank_tax
            
            # –í—ã—á–∏—Ç–∞–µ–º 4% –Ω–∞–ª–æ–≥
            tax_4_percent = total_price * 0.04
            profit -= tax_4_percent
            
            # –í—ã—á–∏—Ç–∞–µ–º –±–æ–Ω—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            profit -= manager_bonus
            
            # –í—ã—á–∏—Ç–∞–µ–º –∑–∞–∫—É–ø–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
            profit -= total_purchase
            
            # –í—ã—á–∏—Ç–∞–µ–º –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã
            profit -= accessories
            
            total_net_profit += profit
            
            print(f"üîß {boiler_name}: —Ü–µ–Ω–∞={total_price:,.0f}, –∑–∞–∫—É–ø–∫–∞={total_purchase:,.0f}, –ø—Ä–∏–±—ã–ª—å={profit:,.0f}")
        
        print(f"üí∞ –û–±—â–∞—è —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –æ—Ç –ø—Ä–æ–¥–∞–∂: {total_net_profit:,.0f} —Ç–µ–Ω–≥–µ")
        
        return total_net_profit
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –ø—Ä–æ–¥–∞–∂: {e}")
        import traceback
        traceback.print_exc()
        return 0.0

def get_net_profit(excel_file_path: str = None) -> float:
    """
    –ü–æ–ª—É—á–∏—Ç—å —á–∏—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü (—Å—É–º–º–∞ —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–∂ - –æ—Ñ–∏—Å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã)
    
    Args:
        excel_file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
    
    Returns:
        –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –≤ —Ç–µ–Ω–≥–µ
    """
    try:
        if excel_file_path is None:
            excel_file_path = os.path.join(os.path.dirname(__file__), "Alseit.xlsx")
        
        print(f"üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑: {excel_file_path}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
        sales_df = load_excel_with_cache(excel_file_path, '–ø—Ä–æ–¥–∞–∂–∏')
        
        if sales_df.empty:
            print("‚ùå –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –ø—É—Å—Ç—ã")
            return 0.0
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
        current_date = pd.Timestamp.now()
        current_month = current_date.month
        current_year = current_date.year
        
        print(f"üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date.strftime('%Y-%m-%d')}")
        print(f"üìÖ –ò—â–µ–º –ø—Ä–æ–¥–∞–∂–∏ –∑–∞: {current_month}.{current_year}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        sales_df['date'] = pd.to_datetime(sales_df['date'], errors='coerce')
        monthly_sales = sales_df[
            (sales_df['date'].dt.month == current_month) & 
            (sales_df['date'].dt.year == current_year)
        ]
        
        if monthly_sales.empty:
            print("‚ùå –ù–µ—Ç –ø—Ä–æ–¥–∞–∂ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü")
            return 0.0
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥–∞–∂ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {len(monthly_sales)}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∏—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å –æ—Ç –∫–∞–∂–¥–æ–π –ø—Ä–æ–¥–∞–∂–∏
        total_net_profit = 0.0
        
        for idx, row in monthly_sales.iterrows():
            boiler_name = row.get('boiler_name', '')
            price = row.get('price', 0)
            quantity = row.get('quantity', 1)
            payment_method = row.get('payment_method', '–Ω–∞–ª–∏—á–Ω—ã–µ')
            accessories = row.get('accessories', 0)
            
            if pd.isna(boiler_name) or boiler_name == '':
                continue
                
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–ª–∞
            from salary_folder.salary_update import BOILER_PRICES, LOW_DEDUCTION_BOILERS, LOW_DEDUCTION_AMOUNT, HIGH_DEDUCTION_AMOUNT, MANAGER_BONUS_RATE, BANK_TAX_RATE
            
            if boiler_name not in BOILER_PRICES:
                continue
                
            boiler_data = BOILER_PRICES[boiler_name]
            boiler_price = boiler_data['price']
            purchase = boiler_data['purchase']
            
            if boiler_price == 0:
                continue
            
            # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
            total_price = boiler_price * quantity
            total_purchase = purchase * quantity
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–æ–Ω—É—Å–æ–≤
            if boiler_name in LOW_DEDUCTION_BOILERS:
                delivery_for_bonus = LOW_DEDUCTION_AMOUNT  # 50,000
            else:
                delivery_for_bonus = HIGH_DEDUCTION_AMOUNT  # 100,000
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            manager_bonus = (total_price - delivery_for_bonus) * MANAGER_BONUS_RATE
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∏—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å –æ—Ç —ç—Ç–æ–π –ø—Ä–æ–¥–∞–∂–∏
            profit = total_price
            
            # –í—ã—á–∏—Ç–∞–µ–º 12% –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –±–∞–Ω–∫
            if payment_method in ['–±–∞–Ω–∫', 'kaspi_pay', 'kaspi_magazine']:
                bank_tax = total_price * BANK_TAX_RATE
                profit -= bank_tax
            
            # –í—ã—á–∏—Ç–∞–µ–º 4% –Ω–∞–ª–æ–≥
            tax_4_percent = total_price * 0.04
            profit -= tax_4_percent
            
            # –í—ã—á–∏—Ç–∞–µ–º –±–æ–Ω—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            profit -= manager_bonus
            
            # –í—ã—á–∏—Ç–∞–µ–º –∑–∞–∫—É–ø–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
            profit -= total_purchase
            
            # –í—ã—á–∏—Ç–∞–µ–º –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã
            profit -= accessories
            
            total_net_profit += profit
            
            print(f"üîß {boiler_name}: —Ü–µ–Ω–∞={total_price:,.0f}, –ø—Ä–∏–±—ã–ª—å={profit:,.0f}")
        
        print(f"üí∞ –û–±—â–∞—è —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –æ—Ç –ø—Ä–æ–¥–∞–∂: {total_net_profit:,.0f} —Ç–µ–Ω–≥–µ")
        
        # –¢–µ–ø–µ—Ä—å –æ—Ç–Ω–∏–º–∞–µ–º –æ—Ñ–∏—Å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
        office_expenses = get_office_expenses_total()
        print(f"üè¢ –û—Ñ–∏—Å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {office_expenses:,.0f} —Ç–µ–Ω–≥–µ")
        
        final_net_profit = total_net_profit - office_expenses
        print(f"üí∏ –ò—Ç–æ–≥–æ–≤–∞—è —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {final_net_profit:,.0f} —Ç–µ–Ω–≥–µ")
        
        return max(0.0, final_net_profit)  # –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏: {e}")
        import traceback
        traceback.print_exc()
        return 0.0

def get_office_expenses_total(excel_file_path: str = None) -> float:
    """
    –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—É–º–º—É –æ—Ñ–∏—Å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    
    Args:
        excel_file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
    
    Returns:
        –û–±—â–∞—è —Å—É–º–º–∞ –æ—Ñ–∏—Å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ —Ç–µ–Ω–≥–µ
    """
    try:
        if excel_file_path is None:
            excel_file_path = os.path.join(os.path.dirname(__file__), "expenses.xlsx")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ñ–∏—Å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–∞—Ö
        office_df = load_excel_with_cache(excel_file_path, 'office')
        
        if office_df.empty:
            return 0.0
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
        current_date = pd.Timestamp.now()
        current_month = current_date.month
        current_year = current_date.year
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        office_df['date'] = pd.to_datetime(office_df['date'], format='%d.%m.%Y', errors='coerce')
        monthly_expenses = office_df[
            (office_df['date'].dt.month == current_month) & 
            (office_df['date'].dt.year == current_year)
        ]
        
        if monthly_expenses.empty:
            return 0.0
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤
        total_expenses = monthly_expenses['amount'].sum()
        
        return float(total_expenses)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –æ—Ñ–∏—Å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤: {e}")
        return 0.0

def get_office_summary(excel_file_path: str = None) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –æ—Ñ–∏—Å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    
    Args:
        excel_file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
    
    Returns:
        –¢–µ–∫—Å—Ç–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
    """
    try:
        if excel_file_path is None:
            excel_file_path = os.path.join(os.path.dirname(__file__), "expenses.xlsx")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ñ–∏—Å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–∞—Ö
        office_df = load_excel_with_cache(excel_file_path, 'office')
        
        if office_df.empty:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ñ–∏—Å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–∞—Ö"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
        current_date = pd.Timestamp.now()
        current_month = current_date.month
        current_year = current_date.year
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        office_df['date'] = pd.to_datetime(office_df['date'], format='%d.%m.%Y', errors='coerce')
        monthly_expenses = office_df[
            (office_df['date'].dt.month == current_month) & 
            (office_df['date'].dt.year == current_year)
        ]
        
        if monthly_expenses.empty:
            return f"–ù–µ—Ç –æ—Ñ–∏—Å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ {current_month}.{current_year}"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        summary = monthly_expenses.groupby('category')['amount'].sum().sort_values(ascending=False)
        total = summary.sum()
        
        result = f"üè¢ –û—Ñ–∏—Å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ {current_month}.{current_year}\n\n"
        for category, amount in summary.items():
            percentage = (amount / total) * 100
            result += f"‚Ä¢ {category}: {amount:,.0f} ‚Ç∏ ({percentage:.1f}%)\n"
        
        result += f"\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total:,.0f} ‚Ç∏"
        return result
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–æ–¥–∫–∏: {str(e)}"

def add_office_constants(excel_file_path: str = None) -> str:
    """
    –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –æ—Ñ–∏—Å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ –Ω–∞—á–∞–ª–µ –º–µ—Å—è—Ü–∞
    
    Args:
        excel_file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
    
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
    """
    try:
        if excel_file_path is None:
            excel_file_path = os.path.join(os.path.dirname(__file__), "expenses.xlsx")
        
        # –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –æ—Ñ–∏—Å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
        fixed_expenses = [
            {"category": "–∞—Ä–µ–Ω–¥–∞ –æ—Ñ–∏—Å–∞", "amount": 450000, "payment_method": "–∫–∞—Ä—Ç–∞", "comments": ""},
            {"category": "–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏", "amount": 129000, "payment_method": "–∫–∞—Ä—Ç–∞", "comments": "–æ—Ñ–∏—Å"},
            {"category": "–≤–æ–¥–∞", "amount": 8800, "payment_method": "–∫–∞—Ä—Ç–∞", "comments": ""},
            {"category": "—É–±–æ—Ä–∫–∞ –æ—Ñ–∏—Å–∞", "amount": 24000, "payment_method": "–∫–∞—Ä—Ç–∞", "comments": ""}
        ]
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        try:
            office_df = load_excel_with_cache(excel_file_path, 'office')
        except:
            office_df = pd.DataFrame(columns=['date', 'category', 'amount', 'payment_method', 'comments'])
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
        current_date = pd.Timestamp.now()
        current_month = current_date.month
        current_year = current_date.year
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ª–∏ —É–∂–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
        office_df['date'] = pd.to_datetime(office_df['date'], errors='coerce')
        monthly_expenses = office_df[
            (office_df['date'].dt.month == current_month) & 
            (office_df['date'].dt.year == current_year)
        ]
        
        if not monthly_expenses.empty:
            return f"–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞ {current_month}.{current_year}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
        new_expenses = []
        for expense in fixed_expenses:
            new_expense = {
                'date': current_date.strftime('%d.%m.%Y'),
                'category': expense['category'],
                'amount': expense['amount'],
                'payment_method': expense['payment_method'],
                'comments': expense['comments']
            }
            new_expenses.append(new_expense)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
        new_df = pd.DataFrame(new_expenses)
        office_df = pd.concat([office_df, new_df], ignore_index=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
        with pd.ExcelWriter(excel_file_path, mode='a', if_sheet_exists='replace') as writer:
            office_df.to_excel(writer, sheet_name='office', index=False)
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à
        data_cache.refresh_file(excel_file_path)
        
        total_amount = sum(expense['amount'] for expense in fixed_expenses)
        return f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —Å—É–º–º—É {total_amount:,.0f} ‚Ç∏ –∑–∞ {current_month}.{current_year}"
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤: {str(e)}"