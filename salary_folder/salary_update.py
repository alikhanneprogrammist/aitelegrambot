# salary_update.py
import pandas as pd
import os
from dotenv import load_dotenv

load_dotenv()
excel_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), os.getenv("EXCEL_FILE_NAME", "Alseit.xlsx"))

# –°–ª–æ–≤–∞—Ä—å —Å —Ü–µ–Ω–∞–º–∏ –∫–æ—Ç–ª–æ–≤ –∏ –∑–∞–∫—É–ø–æ—á–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
BOILER_PRICES = {
    'alseit_25': {'price': 870000, 'purchase': 566500},
    'alseit_30': {'price': 970000, 'purchase': 586500},
    'alseit_40': {'price': 1300000, 'purchase': 646500},
    'alseit_50': {'price': 1400000, 'purchase': 696500},
    'alseit_60': {'price': 1500000, 'purchase': 746500},
    'alseit_70': {'price': 1600000, 'purchase': 796500},
    'alseit_80': {'price': 1800000, 'purchase': 896500},
    'alseit_90': {'price': 2000000, 'purchase': 946500},
    'alseit_100': {'price': 2400000, 'purchase': 1246500},
    'alseit_120': {'price': 3000000, 'purchase': 1546500},
    '—Å—Ç–∞–Ω–¥–∞—Ä—Ç_16': {'price': 790000, 'purchase': 496500},
    '—Å—Ç–∞–Ω–¥–∞—Ä—Ç_20': {'price': 830000, 'purchase': 521500},
    '–º–∏–Ω–∏_20': {'price': 750000, 'purchase': 456500},
    '–º–∏–Ω–∏_16': {'price': 650000, 'purchase': 396500},
    '–º–∏–Ω–∏_12': {'price': 570000, 'purchase': 331500},
    'balseit_15': {'price': 690000, 'purchase': 321000},
    'balseit_20': {'price': 790000, 'purchase': 430000}
}

# –ö–æ—Ç–ª—ã —Å –≤—ã—á–µ—Ç–æ–º 50,000 (–º–∏–Ω–∏ 12-20 –∏ alseit 25-30)
LOW_DEDUCTION_BOILERS = ['–º–∏–Ω–∏_12', '–º–∏–Ω–∏_16', '–º–∏–Ω–∏_20', 'alseit_25', 'alseit_30']
LOW_DEDUCTION_AMOUNT = 50000
HIGH_DEDUCTION_AMOUNT = 100000

# –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
MANAGER_BONUS_RATE = 0.05  # 5% —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
ROP_BONUS_RATE = 0.01      # 1% –†–û–ü
BANK_TAX_RATE = 0.12       # 12% –Ω–∞–ª–æ–≥ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ –±–∞–Ω–∫

def calculate_boiler_bonus(boiler_name, payment_method, delivery_amount, accessories=0, quantity=1):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–æ–Ω—É—Å –¥–ª—è –∫–æ—Ç–ª–∞ –ø–æ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ:
    - –ë–æ–Ω—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞: (price - –¥–æ—Å—Ç–∞–≤–∫–∞) * 5%
      - –º–∏–Ω–∏ 12-20 –∏ alseit 25-30: –¥–æ—Å—Ç–∞–≤–∫–∞ = 50,000
      - –æ—Å—Ç–∞–ª—å–Ω—ã–µ: –¥–æ—Å—Ç–∞–≤–∫–∞ = 100,000
      - –µ—Å–ª–∏ –Ω–∞–ª–∏—á–Ω—ã–º–∏: (price - 4700) * 5%
    - –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: price - 12%(–µ—Å–ª–∏ –±–∞–Ω–∫) - 4% –Ω–∞–ª–æ–≥ - –¥–æ—Å—Ç–∞–≤–∫–∞ - –±–æ–Ω—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ - purchase
    """
    if boiler_name not in BOILER_PRICES:
        return 0, 0, 0  # manager_bonus, rop_bonus, profit
    
    boiler_data = BOILER_PRICES[boiler_name]
    price = boiler_data['price']
    purchase = boiler_data['purchase']
    
    if price == 0:  # –î–ª—è elbrus_100 –±–µ–∑ —Ü–µ–Ω—ã
        return 0, 0, 0
    
    # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
    total_price = price * quantity
    total_purchase = purchase * quantity
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±–æ–Ω—É—Å–æ–≤
    # –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Ç–∏–ø—É –∫–æ—Ç–ª–∞ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã)
    if boiler_name in LOW_DEDUCTION_BOILERS:
        delivery_for_bonus = LOW_DEDUCTION_AMOUNT  # 50,000 –¥–ª—è –º–∏–Ω–∏ 12-20 –∏ alseit 25-30
    else:
        delivery_for_bonus = HIGH_DEDUCTION_AMOUNT  # 100,000 –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    manager_bonus = (total_price - delivery_for_bonus) * MANAGER_BONUS_RATE
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ROP –±–æ–Ω—É—Å (1% –æ—Ç —Ç–æ–π –∂–µ –±–∞–∑—ã)
    rop_bonus = (total_price - delivery_for_bonus) * ROP_BONUS_RATE
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∏—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å
    # price - 12%(–µ—Å–ª–∏ –±–∞–Ω–∫) - 4% –Ω–∞–ª–æ–≥ - –±–æ–Ω—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ - purchase - –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã
    # –î–æ—Å—Ç–∞–≤–∫–∞ —É–∂–µ —É—á—Ç–µ–Ω–∞ –≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—É–º–º–∞—Ö (50,000/100,000) –¥–ª—è –±–æ–Ω—É—Å–æ–≤
    profit = total_price
    
    # –í—ã—á–∏—Ç–∞–µ–º 12% –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –±–∞–Ω–∫
    if payment_method in ['–±–∞–Ω–∫', 'kaspi_pay', 'kaspi_magazine']:
        bank_tax = total_price * BANK_TAX_RATE
        profit -= bank_tax
    
    # –í—ã—á–∏—Ç–∞–µ–º 4% –Ω–∞–ª–æ–≥
    tax_4_percent = total_price * 0.04
    profit -= tax_4_percent
    
    # –ù–ï –≤—ã—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É - –æ–Ω–∞ —É–∂–µ —É—á—Ç–µ–Ω–∞ –≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—É–º–º–∞—Ö –¥–ª—è –±–æ–Ω—É—Å–æ–≤
    
    # –í—ã—á–∏—Ç–∞–µ–º –±–æ–Ω—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    profit -= manager_bonus
    
    # –í—ã—á–∏—Ç–∞–µ–º –∑–∞–∫—É–ø–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    profit -= total_purchase
    
    # –í—ã—á–∏—Ç–∞–µ–º –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã
    profit -= accessories
    
    return manager_bonus, rop_bonus, profit

def update_salary():
    sales = pd.read_excel(excel_path, sheet_name="–ø—Ä–æ–¥–∞–∂–∏")
    salary = pd.read_excel(excel_path, sheet_name="–∑–∞—Ä–ø–ª–∞—Ç–∞")

    # === 2. –ù–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã —Å —É—á–µ—Ç–æ–º –∫–æ—Ç–ª–æ–≤ ===
    delivery_pay = float(os.getenv("DELIVERY_PAY", "55000"))
    delivery_shop = float(os.getenv("DELIVERY_SHOP", "4700"))
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel)
    sales['temp_manager_bonus'] = 0.0
    sales['temp_salary_rop'] = 0.0
    sales['temp_profit'] = 0.0
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–æ–¥–∞–∂–∏
    for idx, row in sales.iterrows():
        boiler_name = row.get('boiler_name', '')
        payment_method = row.get('payment_method', '–Ω–∞–ª–∏—á–Ω—ã–µ')
        quantity = row.get('quantity', 1)
        delivery = row.get('delivery', '')
        accessories = row.get('accessories', 0)
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ—Ç–ª–∞
        if pd.isna(boiler_name) or boiler_name == '':
            continue
            
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        boiler_name = str(boiler_name).strip()
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º NaN –≤ payment_method
        if pd.isna(payment_method):
            payment_method = '–Ω–∞–ª–∏—á–Ω—ã–µ'
        else:
            payment_str = str(payment_method).strip().lower()
            if payment_str in ['–Ω–∞–ª', '–Ω–∞–ª–∏—á–Ω—ã–µ', '–Ω–∞–ª–∏—á–∫–∞', 'cash']:
                payment_method = '–Ω–∞–ª–∏—á–Ω—ã–µ'
            elif payment_str in ['–±–∞–Ω–∫', '–±–∞–Ω–∫–æ–≤—Å–∫–∏–π', '–∫–∞—Ä—Ç–∞', 'bank', 'card']:
                payment_method = '–±–∞–Ω–∫'
            else:
                payment_method = '–Ω–∞–ª–∏—á–Ω—ã–µ'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º NaN –≤ quantity
        if pd.isna(quantity):
            quantity = 1
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º delivery - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_amount = 0
        if not pd.isna(delivery) and delivery != '':
            delivery_str = str(delivery).strip().lower()
            if delivery_str == '–ø—ç–π':
                delivery_amount = delivery_pay  # 55,000
            elif delivery_str == '–º–∞–≥–∞–∑–∏–Ω':
                delivery_amount = delivery_shop  # 4,700
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏
                try:
                    delivery_amount = float(delivery_str)
                except:
                    delivery_amount = 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º NaN –≤ accessories
        if pd.isna(accessories):
            accessories = 0
        else:
            try:
                accessories = float(accessories)
            except:
                accessories = 0
        
        manager_bonus, rop_bonus, profit = calculate_boiler_bonus(
            boiler_name, payment_method, delivery_amount, accessories, quantity
        )
        
        sales.loc[idx, 'temp_manager_bonus'] = manager_bonus
        sales.loc[idx, 'temp_salary_rop'] = rop_bonus
        sales.loc[idx, 'temp_profit'] = profit
        sales.loc[idx, 'delivery_cost'] = delivery_amount
    
    # –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —Ü–∏–∫–ª–µ –≤—ã—à–µ

    # === 3. –ì–æ—Ç–æ–≤–∏–º –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è –∑–∞—Ä–ø–ª–∞—Ç—ã ===
    sales['date'] = pd.to_datetime(sales['date'], format='%d.%m.%Y', errors='coerce')

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏–∑ –ª–∏—Å—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã
    # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    exclude_cols = ['date', 'order', 'developer', 'employee ROP', 'assistant', 'assistant 2', 'supplier manager']
    manager_cols = [c for c in salary.columns if c not in exclude_cols]
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {manager_cols}")

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –±–æ–Ω—É—Å–æ–≤ –ø–æ –¥–∞—Ç–µ –∏ –∑–∞–∫–∞–∑—É
    bonus_dict = {}
    
    for idx, row in sales.iterrows():
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ—Ç–ª–∞
        if pd.isna(row['boiler_name']) or row['boiler_name'] == '':
            continue
            
        date = row['date']
        order = row['order']
        key = (date, order)
        
        if key not in bonus_dict:
            bonus_dict[key] = {
                'date': date,
                'order': order,
                'employee ROP': 0,
                'managers': {}
            }
        
        # –î–æ–±–∞–≤–ª—è–µ–º ROP –±–æ–Ω—É—Å
        bonus_dict[key]['employee ROP'] += row['temp_salary_rop']
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        manager_name = row['manager']
        if manager_name in manager_cols:
            if manager_name not in bonus_dict[key]['managers']:
                bonus_dict[key]['managers'][manager_name] = 0
            bonus_dict[key]['managers'][manager_name] += row['temp_manager_bonus']
        else:
            # –ï—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö, –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            print(f"‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä '{manager_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö –∑–∞—Ä–ø–ª–∞—Ç—ã")
        

    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∑–∞—Ä–ø–ª–∞—Ç—ã
    rows = []
    for key, data in bonus_dict.items():
        new_row = {col: 0 for col in salary.columns}
        new_row['date'] = data['date']
        new_row['order'] = data['order']
        new_row['employee ROP'] = data['employee ROP']
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        for manager, bonus in data['managers'].items():
            new_row[manager] = bonus
            
        rows.append(new_row)

    sales_salary = pd.DataFrame(rows)

    # === 4. –°–∫–ª–µ–∏–≤–∞–µ–º: –æ–∫–ª–∞–¥ + –ø—Ä–æ–¥–∞–∂–∏ ===
    salary_oklad = salary.iloc[[0]].copy()
    salary_final = pd.concat([salary_oklad, sales_salary], ignore_index=True)

    # === 5. –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –±–æ–Ω—É—Å–∞–º ===
    bonus_summary = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º ROP –±–æ–Ω—É—Å—ã (–æ–∫–ª–∞–¥ + –±–æ–Ω—É—Å—ã –æ—Ç –ø—Ä–æ–¥–∞–∂)
    rop_oklad = salary_oklad['employee ROP'].iloc[0] if len(salary_oklad) > 0 else 0
    total_rop_bonus = sales_salary['employee ROP'].sum()
    total_rop_salary = rop_oklad + total_rop_bonus
    bonus_summary.append({
        '–¢–∏–ø': 'ROP —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏',
        '–°—É–º–º–∞': total_rop_salary
    })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–∫–ª–∞–¥—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –æ–∫–ª–∞–¥—ã, –±–µ–∑ –±–æ–Ω—É—Å–æ–≤)
    fixed_salary_cols = ['developer', 'assistant', 'assistant 2', 'supplier manager']
    for col in fixed_salary_cols:
        if col in salary_oklad.columns:
            oklad = salary_oklad[col].iloc[0] if len(salary_oklad) > 0 else 0
            if oklad > 0:
                bonus_summary.append({
                    '–¢–∏–ø': col,
                    '–°—É–º–º–∞': oklad
                })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (–æ–∫–ª–∞–¥ + –±–æ–Ω—É—Å—ã –æ—Ç –ø—Ä–æ–¥–∞–∂)
    for col in manager_cols:
        if col in sales_salary.columns:
            # –û–∫–ª–∞–¥ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
            oklad = salary_oklad[col].iloc[0] if len(salary_oklad) > 0 and col in salary_oklad.columns else 0
            # –ë–æ–Ω—É—Å—ã –æ—Ç –ø—Ä–æ–¥–∞–∂
            bonus_from_sales = sales_salary[col].sum()
            # –û–±—â–∞—è —Å—É–º–º–∞
            total_salary = oklad + bonus_from_sales
            
            if total_salary > 0:
                bonus_summary.append({
                    '–¢–∏–ø': col,
                    '–°—É–º–º–∞': total_salary
                })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
    total_all_salaries = sum([item['–°—É–º–º–∞'] for item in bonus_summary])
    bonus_summary.append({
        '–¢–∏–ø': '–û–ë–©–ê–Ø –°–£–ú–ú–ê',
        '–°—É–º–º–∞': total_all_salaries
    })
    
    bonus_summary_df = pd.DataFrame(bonus_summary)

    # === 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º ===
    # –ß–∏—Ç–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–∏—Å—Ç—ã
    try:
        existing_sheets = {}
        xl_file = pd.ExcelFile(excel_path)
        for sheet_name in xl_file.sheet_names:
            if sheet_name not in ["–ø—Ä–æ–¥–∞–∂–∏", "–∑–∞—Ä–ø–ª–∞—Ç–∞", "—Å–≤–æ–¥–∫–∞_–±–æ–Ω—É—Å–æ–≤"]:
                existing_sheets[sheet_name] = pd.read_excel(excel_path, sheet_name=sheet_name)
    except:
        existing_sheets = {}
    
    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    # delivery_cost —Ç–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
    columns_to_drop = ['temp_manager_bonus', 'temp_salary_rop', 'temp_profit']
    sales_clean = sales.drop(columns=columns_to_drop, errors='ignore')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥)
    sales_clean['date'] = pd.to_datetime(sales_clean['date'], format='%d.%m.%Y', errors='coerce').dt.strftime('%d.%m.%Y')
    salary_final['date'] = pd.to_datetime(salary_final['date'], format='%d.%m.%Y', errors='coerce').dt.strftime('%d.%m.%Y')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã
    with pd.ExcelWriter(excel_path, engine="openpyxl") as writer:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂ –ë–ï–ó –∫–æ–ª–æ–Ω–æ–∫ –±–æ–Ω—É—Å–æ–≤
        sales_clean.to_excel(writer, sheet_name="–ø—Ä–æ–¥–∞–∂–∏", index=False)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É —Å –±–æ–Ω—É—Å–∞–º–∏
        salary_final.to_excel(writer, sheet_name="–∑–∞—Ä–ø–ª–∞—Ç–∞", index=False)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–¥–∫—É –±–æ–Ω—É—Å–æ–≤
        bonus_summary_df.to_excel(writer, sheet_name="—Å–≤–æ–¥–∫–∞_–±–æ–Ω—É—Å–æ–≤", index=False)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã
        for sheet_name, df in existing_sheets.items():
            df.to_excel(writer, sheet_name=sheet_name, index=False)

    # === 7. –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ===
    result_message = "‚úÖ Salary –æ–±–Ω–æ–≤–ª–µ–Ω–∞: –æ–∫–ª–∞–¥—ã + –ø—Ä–æ–¥–∞–∂–∏ –ø–æ –¥–Ω—è–º –∑–∞–ø–∏—Å–∞–Ω—ã\n"
    result_message += "üìä –°–≤–æ–¥–∫–∞ –±–æ–Ω—É—Å–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ª–∏—Å—Ç '—Å–≤–æ–¥–∫–∞_–±–æ–Ω—É—Å–æ–≤'\n\n"
    result_message += "üí∞ –ò–¢–û–ì–û–í–´–ï –ë–û–ù–£–°–´:\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±–æ–Ω—É—Å—ã (–±–µ–∑ –æ–∫–ª–∞–¥–æ–≤)
    total_bonuses_only = 0
    for _, row in bonus_summary_df.iterrows():
        if row['–¢–∏–ø'] == '–û–ë–©–ê–Ø –°–£–ú–ú–ê':
            continue
        elif row['–¢–∏–ø'] == 'ROP —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏':
            # –î–ª—è ROP –≤—ã—á–∏—Ç–∞–µ–º –æ–∫–ª–∞–¥
            oklad = salary_oklad['employee ROP'].iloc[0] if len(salary_oklad) > 0 else 0
            bonus_only = row['–°—É–º–º–∞'] - oklad
            result_message += f"üë§ {row['–¢–∏–ø']}: {bonus_only:,.0f} —Ç–µ–Ω–≥–µ\n"
            total_bonuses_only += bonus_only
        elif row['–¢–∏–ø'] in ['developer', 'assistant', 'assistant 2', 'supplier manager']:
            # –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –±–æ–Ω—É—Å–æ–≤ –Ω–µ—Ç
            continue
        else:
            # –î–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤—ã—á–∏—Ç–∞–µ–º –æ–∫–ª–∞–¥
            oklad = salary_oklad[row['–¢–∏–ø']].iloc[0] if len(salary_oklad) > 0 and row['–¢–∏–ø'] in salary_oklad.columns else 0
            bonus_only = row['–°—É–º–º–∞'] - oklad
            result_message += f"üë§ {row['–¢–∏–ø']}: {bonus_only:,.0f} —Ç–µ–Ω–≥–µ\n"
            total_bonuses_only += bonus_only
    
    result_message += f"üéØ –û–ë–©–ê–Ø –°–£–ú–ú–ê –ë–û–ù–£–°–û–í: {total_bonuses_only:,.0f} —Ç–µ–Ω–≥–µ\n"

    return result_message

def get_salary_summary():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é —Å–≤–æ–¥–∫—É –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º (–æ–∫–ª–∞–¥—ã + –±–æ–Ω—É—Å—ã)"""
    try:
        excel_path = os.path.join(os.path.dirname(__file__), "..", "Alseit.xlsx")
        
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        salary = pd.read_excel(excel_path, sheet_name='–∑–∞—Ä–ø–ª–∞—Ç–∞')
        sales = pd.read_excel(excel_path, sheet_name='–ø—Ä–æ–¥–∞–∂–∏')
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–∫–ª–∞–¥—ã –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        salary_oklad = salary.iloc[[0]].copy()
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∑–∞—Ä–ø–ª–∞—Ç—ã
        exclude_cols = ['date', 'order', 'developer', 'employee ROP', 'assistant', 'assistant 2', 'supplier manager']
        manager_cols = [col for col in salary.columns if col not in exclude_cols]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã –æ—Ç –ø—Ä–æ–¥–∞–∂ –∏—Å–ø–æ–ª—å–∑—É—è —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ update_salary()
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
        sales['temp_manager_bonus'] = 0.0
        sales['temp_salary_rop'] = 0.0
        sales['temp_profit'] = 0.0
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–æ–¥–∞–∂–∏
        for idx, row in sales.iterrows():
            boiler_name = row.get('boiler_name', '')
            payment_method = row.get('payment_method', '–Ω–∞–ª–∏—á–Ω—ã–µ')
            quantity = row.get('quantity', 1)
            delivery = row.get('delivery', '')
            accessories = row.get('accessories', 0)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ—Ç–ª–∞
            if pd.isna(boiler_name) or boiler_name == '':
                continue
                
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
            boiler_name = str(boiler_name).strip()
                
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º NaN –≤ payment_method
            if pd.isna(payment_method):
                payment_method = '–Ω–∞–ª–∏—á–Ω—ã–µ'
            else:
                payment_str = str(payment_method).strip().lower()
                if payment_str in ['–Ω–∞–ª', '–Ω–∞–ª–∏—á–Ω—ã–µ', '–Ω–∞–ª–∏—á–∫–∞', 'cash']:
                    payment_method = '–Ω–∞–ª–∏—á–Ω—ã–µ'
                elif payment_str in ['–±–∞–Ω–∫', '–±–∞–Ω–∫–æ–≤—Å–∫–∏–π', '–∫–∞—Ä—Ç–∞', 'bank', 'card']:
                    payment_method = '–±–∞–Ω–∫'
                else:
                    payment_method = '–Ω–∞–ª–∏—á–Ω—ã–µ'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º NaN –≤ quantity
            if pd.isna(quantity):
                quantity = 1
                
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º delivery - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –¥–æ—Å—Ç–∞–≤–∫–∏
            delivery_amount = 0
            if not pd.isna(delivery) and delivery != '':
                delivery_str = str(delivery).strip().lower()
                if delivery_str == '–ø—ç–π':
                    delivery_amount = 55000  # delivery_pay
                elif delivery_str == '–º–∞–≥–∞–∑–∏–Ω':
                    delivery_amount = 4700   # delivery_shop
                else:
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏
                    try:
                        delivery_amount = float(delivery_str)
                    except:
                        delivery_amount = 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º NaN –≤ accessories
            if pd.isna(accessories):
                accessories = 0
            else:
                try:
                    accessories = float(accessories)
                except:
                    accessories = 0
            
            manager_bonus, rop_bonus, profit = calculate_boiler_bonus(
                boiler_name, payment_method, delivery_amount, accessories, quantity
            )
            
            sales.loc[idx, 'temp_manager_bonus'] = manager_bonus
            sales.loc[idx, 'temp_salary_rop'] = rop_bonus
            sales.loc[idx, 'temp_profit'] = profit
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –±–æ–Ω—É—Å–æ–≤ –ø–æ –¥–∞—Ç–µ –∏ –∑–∞–∫–∞–∑—É
        bonus_dict = {}
        
        for idx, row in sales.iterrows():
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ—Ç–ª–∞
            if pd.isna(row['boiler_name']) or row['boiler_name'] == '':
                continue
                
            date = row['date']
            order = row['order']
            key = (date, order)
            
            if key not in bonus_dict:
                bonus_dict[key] = {
                    'date': date,
                    'order': order,
                    'employee ROP': 0,
                    'managers': {}
                }
            
            # –î–æ–±–∞–≤–ª—è–µ–º ROP –±–æ–Ω—É—Å
            bonus_dict[key]['employee ROP'] += row['temp_salary_rop']
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            manager_name = row['manager']
            if manager_name in manager_cols:
                if manager_name not in bonus_dict[key]['managers']:
                    bonus_dict[key]['managers'][manager_name] = 0
                bonus_dict[key]['managers'][manager_name] += row['temp_manager_bonus']
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∑–∞—Ä–ø–ª–∞—Ç—ã
        rows = []
        for key, data in bonus_dict.items():
            new_row = {col: 0 for col in salary.columns}
            new_row['date'] = data['date']
            new_row['order'] = data['order']
            new_row['employee ROP'] = data['employee ROP']
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            for manager, bonus in data['managers'].items():
                new_row[manager] = bonus
                
            rows.append(new_row)
        
        sales_salary = pd.DataFrame(rows)
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º
        salary_summary = []
        
        # ROP —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ (–æ–∫–ª–∞–¥ + –±–æ–Ω—É—Å—ã)
        rop_oklad = salary_oklad['employee ROP'].iloc[0] if len(salary_oklad) > 0 and 'employee ROP' in salary_oklad.columns else 0
        total_rop_bonus = sales_salary['employee ROP'].sum() if 'employee ROP' in sales_salary.columns else 0
        total_rop_salary = rop_oklad + total_rop_bonus
        salary_summary.append({
            '–¢–∏–ø': 'ROP —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏',
            '–û–∫–ª–∞–¥': rop_oklad,
            '–ë–æ–Ω—É—Å—ã': total_rop_bonus,
            '–ò—Ç–æ–≥–æ': total_rop_salary
        })
        
        # –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã (—Ç–æ–ª—å–∫–æ –æ–∫–ª–∞–¥—ã)
        fixed_salary_cols = ['developer', 'assistant', 'assistant 2', 'supplier manager']
        for col in fixed_salary_cols:
            if col in salary_oklad.columns:
                oklad = salary_oklad[col].iloc[0] if len(salary_oklad) > 0 else 0
                if oklad > 0:
                    salary_summary.append({
                        '–¢–∏–ø': col,
                        '–û–∫–ª–∞–¥': oklad,
                        '–ë–æ–Ω—É—Å—ã': 0,
                        '–ò—Ç–æ–≥–æ': oklad
                    })
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä—ã (–æ–∫–ª–∞–¥ + –±–æ–Ω—É—Å—ã)
        for col in manager_cols:
            if col in sales_salary.columns:
                oklad = salary_oklad[col].iloc[0] if len(salary_oklad) > 0 and col in salary_oklad.columns else 0
                bonus_from_sales = sales_salary[col].sum()
                total_salary = oklad + bonus_from_sales
                
                if total_salary > 0:
                    salary_summary.append({
                        '–¢–∏–ø': col,
                        '–û–∫–ª–∞–¥': oklad,
                        '–ë–æ–Ω—É—Å—ã': bonus_from_sales,
                        '–ò—Ç–æ–≥–æ': total_salary
                    })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        result_message = "üí∞ –ü–û–õ–ù–ê–Ø –°–í–û–î–ö–ê –ü–û –ó–ê–†–ü–õ–ê–¢–ê–ú:\n\n"
        
        total_oklad = 0
        total_bonus = 0
        total_all = 0
        
        for item in salary_summary:
            result_message += f"üë§ {item['–¢–∏–ø']}:\n"
            result_message += f"   üíº –û–∫–ª–∞–¥: {item['–û–∫–ª–∞–¥']:,.0f} —Ç–µ–Ω–≥–µ\n"
            if item['–ë–æ–Ω—É—Å—ã'] > 0:
                result_message += f"   üéØ –ë–æ–Ω—É—Å—ã: {item['–ë–æ–Ω—É—Å—ã']:,.0f} —Ç–µ–Ω–≥–µ\n"
            result_message += f"   üí∞ –ò—Ç–æ–≥–æ: {item['–ò—Ç–æ–≥–æ']:,.0f} —Ç–µ–Ω–≥–µ\n\n"
            
            total_oklad += item['–û–∫–ª–∞–¥']
            total_bonus += item['–ë–æ–Ω—É—Å—ã']
            total_all += item['–ò—Ç–æ–≥–æ']
        
        result_message += f"üìä –û–ë–©–ò–ï –°–£–ú–ú–´:\n"
        result_message += f"üíº –í—Å–µ–≥–æ –æ–∫–ª–∞–¥–æ–≤: {total_oklad:,.0f} —Ç–µ–Ω–≥–µ\n"
        result_message += f"üéØ –í—Å–µ–≥–æ –±–æ–Ω—É—Å–æ–≤: {total_bonus:,.0f} —Ç–µ–Ω–≥–µ\n"
        result_message += f"üí∞ –û–ë–©–ê–Ø –°–£–ú–ú–ê: {total_all:,.0f} —Ç–µ–Ω–≥–µ"
        
        return result_message
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –∑–∞—Ä–ø–ª–∞—Ç: {str(e)}"

if __name__ == "__main__":
    print(update_salary())
