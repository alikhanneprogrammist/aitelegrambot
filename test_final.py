#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sales_folder.chatgpt_analyzer import ChatGPTAnalyzer
import pandas as pd

def test_create_order():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    analyzer = ChatGPTAnalyzer()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π Excel —Ñ–∞–π–ª
    test_data = {
        'order': [1, 2, 3],
        'date': ['2025-01-01', '2025-01-02', '2025-01-03'],
        'client': ['–ö–ª–∏–µ–Ω—Ç1', '–ö–ª–∏–µ–Ω—Ç2', '–ö–ª–∏–µ–Ω—Ç3'],
        'boiler_name': ['alseit_25', 'alseit_30', 'alseit_40'],
        'quantity': [1, 2, 1],
        'price': [870000, 1940000, 1300000],
        'purchase': [566500, 1173000, 646500],
        'payment_method': ['–∫–∞—Ä—Ç–∞', '–∫–∞—Ä—Ç–∞', '–∫–∞—Ä—Ç–∞'],
        'delivery': ['–º–∞–≥–∞–∑–∏–Ω', '–¥–æ–º', '–º–∞–≥–∞–∑–∏–Ω'],
        'accessories': ['', '', ''],
        'manager': ['–ê–ª–∏–±–µ–∫', '–ê–ª–∏–±–µ–∫', '–ê–ª–∏–±–µ–∫'],
        'delivery_cost': [0, 55000, 0]
    }
    
    test_df = pd.DataFrame(test_data)
    test_file = 'test_orders.xlsx'
    
    # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å –ª–∏—Å—Ç–æ–º "–ø—Ä–æ–¥–∞–∂–∏"
    with pd.ExcelWriter(test_file, engine='openpyxl') as writer:
        test_df.to_excel(writer, sheet_name='–ø—Ä–æ–¥–∞–∂–∏', index=False)
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...")
    
    # –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
    test_command = "–°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ balseit _20 –¥–æ—Å—Ç–∞–≤–∫–∞ –º–∞–≥–∞–∑–∏–Ω –º–µ–Ω–µ–¥–∂–µ—Ä –ê–ª–∏–±–µ–∫"
    
    try:
        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        result = analyzer.edit_excel_data(test_file, test_command)
        
        print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(result)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –æ–±–Ω–æ–≤–∏–ª—Å—è
        updated_df = pd.read_excel(test_file)
        print(f"\nüìä –ó–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª–µ: {len(updated_df)}")
        print(f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑: {updated_df.iloc[-1]['order']}")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        os.remove(test_file)
        
        return "‚úÖ" in result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if os.path.exists(test_file):
            os.remove(test_file)
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...")
    success = test_create_order()
    
    if success:
        print("\n‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")
    
    sys.exit(0 if success else 1)
