"""
–ú–æ–¥—É–ª—å –¥–ª—è AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤
"""
import os
import pandas as pd
import sys
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional
from openai import OpenAI
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ utils
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from utils import load_excel_with_cache

load_dotenv()

class AIRecommendations:
    """–ö–ª–∞—Å—Å –¥–ª—è AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤"""
    
    def __init__(self, excel_file_path: str):
        self.excel_file_path = excel_file_path
        self.sales_df = None
        self.salary_df = None
        self.openai_client = None
        self._load_data()
        self._init_openai()
    
    def _load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∏ –∑–∞—Ä–ø–ª–∞—Ç–∞—Ö"""
        try:
            self.sales_df = load_excel_with_cache(self.excel_file_path, '–ø—Ä–æ–¥–∞–∂–∏')
            self.salary_df = load_excel_with_cache(self.excel_file_path, '–∑–∞—Ä–ø–ª–∞—Ç–∞')
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–º–µ—à–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –¥–∞—Ç (—Å—Ç—Ä–æ–∫–∏ –∏ datetime –æ–±—ä–µ–∫—Ç—ã)
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
            processed_dates = []
            for date_val in self.sales_df['date']:
                if pd.isna(date_val):
                    processed_dates.append(pd.NaT)
                elif isinstance(date_val, pd.Timestamp):
                    # –£–∂–µ datetime –æ–±—ä–µ–∫—Ç
                    processed_dates.append(date_val)
                else:
                    # –°—Ç—Ä–æ–∫–∞, –Ω—É–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å
                    date_str = str(date_val)
                    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ –≤ –¥–∞—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09.009.2025 -> 09.09.2025)
                    import re
                    date_str = re.sub(r'\.0+(\d)\.', r'.\1.', date_str)
                    try:
                        parsed_date = pd.to_datetime(date_str, format='%d.%m.%Y', errors='coerce')
                        processed_dates.append(parsed_date)
                    except:
                        processed_dates.append(pd.NaT)
            
            self.sales_df['date'] = processed_dates
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def _init_openai(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç OpenAI –∫–ª–∏–µ–Ω—Ç"""
        try:
            api_key = os.getenv('OPENAI_API_KEY')
            if api_key:
                self.openai_client = OpenAI(api_key=api_key)
            else:
                print("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI: {e}")
    
    def analyze_trends_and_patterns(self, months_back: int = 6) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥—ã –∏ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            months_back: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –Ω–∞–∑–∞–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            Dict: –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–µ–π
        """
        try:
            now = datetime.now()
            analysis_data = []
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Å—è—Ü—ã
            for i in range(months_back):
                month_date = now - timedelta(days=30 * i)
                month = month_date.month
                year = month_date.year
                
                month_data = self.sales_df[
                    (self.sales_df['date'].dt.year == year) & 
                    (self.sales_df['date'].dt.month == month)
                ].copy()
                
                if not month_data.empty:
                    total_sales = (month_data['price'] * month_data['quantity']).sum()
                    total_orders = len(month_data)
                    avg_order_value = total_sales / total_orders if total_orders > 0 else 0
                    
                    # –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
                    manager_sales = month_data.groupby('manager').agg({
                        'price': lambda x: (x * month_data.loc[x.index, 'quantity']).sum(),
                        'quantity': 'sum',
                        'order': 'count'
                    }).rename(columns={'price': 'sales', 'order': 'orders'})
                    
                    # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
                    product_sales = month_data.groupby('name_boiler').agg({
                        'price': lambda x: (x * month_data.loc[x.index, 'quantity']).sum(),
                        'quantity': 'sum',
                        'order': 'count'
                    }).rename(columns={'price': 'sales', 'order': 'orders'})
                    
                    analysis_data.append({
                        'month': f"{year}-{month:02d}",
                        'total_sales': total_sales,
                        'total_orders': total_orders,
                        'avg_order_value': avg_order_value,
                        'top_manager': manager_sales['sales'].idxmax() if not manager_sales.empty else None,
                        'top_product': product_sales['sales'].idxmax() if not product_sales.empty else None,
                        'manager_diversity': len(manager_sales),
                        'product_diversity': len(product_sales)
                    })
            
            # –í—ã—è–≤–ª—è–µ–º –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏
            patterns = self._identify_patterns(analysis_data)
            
            return {
                'status': 'success',
                'analysis_period': f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {months_back} –º–µ—Å—è—Ü–µ–≤",
                'monthly_data': analysis_data,
                'patterns': patterns,
                'trends': self._calculate_trends(analysis_data)
            }
            
        except Exception as e:
            return {'status': 'error', 'message': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}'}
    
    def _identify_patterns(self, data: List[Dict]) -> Dict:
        """–í—ã—è–≤–ª—è–µ—Ç –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if len(data) < 2:
                return {'status': 'insufficient_data'}
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞/–ø–∞–¥–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂
            sales_values = [d['total_sales'] for d in data]
            sales_growth = []
            for i in range(1, len(sales_values)):
                growth = (sales_values[i-1] - sales_values[i]) / sales_values[i] * 100 if sales_values[i] > 0 else 0
                sales_growth.append(growth)
            
            avg_growth = sum(sales_growth) / len(sales_growth) if sales_growth else 0
            
            # –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
            monthly_sales = {}
            for d in data:
                month = d['month'].split('-')[1]
                if month not in monthly_sales:
                    monthly_sales[month] = []
                monthly_sales[month].append(d['total_sales'])
            
            seasonal_pattern = {}
            for month, sales in monthly_sales.items():
                seasonal_pattern[month] = sum(sales) / len(sales) if sales else 0
            
            # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
            sales_volatility = self._calculate_volatility(sales_values)
            
            return {
                'avg_growth_rate': avg_growth,
                'growth_trend': 'üìà –†–æ—Å—Ç' if avg_growth > 5 else 'üìâ –°–Ω–∏–∂–µ–Ω–∏–µ' if avg_growth < -5 else '‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω–æ',
                'seasonal_pattern': seasonal_pattern,
                'volatility': sales_volatility,
                'stability': '–°—Ç–∞–±–∏–ª—å–Ω–æ' if sales_volatility < 20 else '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ'
            }
            
        except Exception as e:
            return {'status': 'error', 'message': f'–û—à–∏–±–∫–∞ –≤—ã—è–≤–ª–µ–Ω–∏—è –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–µ–π: {e}'}
    
    def _calculate_volatility(self, values: List[float]) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)"""
        if len(values) < 2:
            return 0
        
        mean = sum(values) / len(values)
        variance = sum((x - mean) ** 2 for x in values) / len(values)
        std_dev = variance ** 0.5
        return (std_dev / mean * 100) if mean > 0 else 0
    
    def _calculate_trends(self, data: List[Dict]) -> Dict:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç—Ä–µ–Ω–¥—ã"""
        try:
            if len(data) < 2:
                return {'status': 'insufficient_data'}
            
            # –¢—Ä–µ–Ω–¥ –ø—Ä–æ–¥–∞–∂
            sales_values = [d['total_sales'] for d in data]
            sales_trend = self._linear_trend(sales_values)
            
            # –¢—Ä–µ–Ω–¥ –∑–∞–∫–∞–∑–æ–≤
            orders_values = [d['total_orders'] for d in data]
            orders_trend = self._linear_trend(orders_values)
            
            # –¢—Ä–µ–Ω–¥ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞
            avg_values = [d['avg_order_value'] for d in data]
            avg_trend = self._linear_trend(avg_values)
            
            return {
                'sales_trend': sales_trend,
                'orders_trend': orders_trend,
                'avg_order_trend': avg_trend
            }
            
        except Exception as e:
            return {'status': 'error', 'message': f'–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}'}
    
    def _linear_trend(self, values: List[float]) -> Dict:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ª–∏–Ω–µ–π–Ω—ã–π —Ç—Ä–µ–Ω–¥"""
        if len(values) < 2:
            return {'slope': 0, 'direction': 'stable'}
        
        n = len(values)
        x = list(range(n))
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –Ω–∞–∫–ª–æ–Ω–∞
        sum_x = sum(x)
        sum_y = sum(values)
        sum_xy = sum(x[i] * values[i] for i in range(n))
        sum_x2 = sum(xi ** 2 for xi in x)
        
        slope = (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x ** 2) if (n * sum_x2 - sum_x ** 2) != 0 else 0
        
        direction = 'growth' if slope > 0 else 'decline' if slope < 0 else 'stable'
        
        return {
            'slope': slope,
            'direction': direction,
            'strength': abs(slope) / (sum(values) / n) * 100 if sum(values) > 0 else 0
        }
    
    def get_ai_recommendations(self, focus_area: str = "general") -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—é –ø—Ä–æ–¥–∞–∂
        
        Args:
            focus_area: –û–±–ª–∞—Å—Ç—å —Ñ–æ–∫—É—Å–∞ (general, sales, efficiency, trends)
            
        Returns:
            str: AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        """
        try:
            if not self.openai_client:
                return "‚ùå OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞."
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            trends_data = self.analyze_trends_and_patterns(3)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
            prompt = self._create_recommendations_prompt(trends_data, focus_area)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç AI
            response = self.openai_client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {
                        "role": "system", 
                        "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –ø—Ä–æ–¥–∞–∂ –∏ –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –∏ –¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—é –ø—Ä–æ–¥–∞–∂. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º."
                    },
                    {"role": "user", "content": prompt}
                ],
                max_tokens=1000,
                temperature=0.7
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}"
    
    def _create_recommendations_prompt(self, trends_data: Dict, focus_area: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        
        if trends_data['status'] != 'success':
            return f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ–±—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂ –≤ –æ–±–ª–∞—Å—Ç–∏ {focus_area} –∏ –¥–∞–π 5-7 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."
        
        data = trends_data['monthly_data']
        patterns = trends_data['patterns']
        trends = trends_data['trends']
        
        prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—é –ø—Ä–æ–¥–∞–∂:
        
        –î–ê–ù–ù–´–ï –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï –ú–ï–°–Ø–¶–´:
        {data}
        
        –í–´–Ø–í–õ–ï–ù–ù–´–ï –ó–ê–ö–û–ù–û–ú–ï–†–ù–û–°–¢–ò:
        - –°—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç: {patterns.get('avg_growth_rate', 0):.1f}%
        - –¢—Ä–µ–Ω–¥ —Ä–æ—Å—Ç–∞: {patterns.get('growth_trend', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
        - –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {patterns.get('stability', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
        
        –¢–†–ï–ù–î–´:
        - –ü—Ä–æ–¥–∞–∂–∏: {trends.get('sales_trend', {}).get('direction', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
        - –ó–∞–∫–∞–∑—ã: {trends.get('orders_trend', {}).get('direction', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
        - –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {trends.get('avg_order_trend', {}).get('direction', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
        
        –û–ë–õ–ê–°–¢–¨ –§–û–ö–£–°–ê: {focus_area}
        
        –î–∞–π 5-7 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—é –ø—Ä–æ–¥–∞–∂. –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º.
        """
        
        return prompt
    
    def generate_weekly_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        try:
            now = datetime.now()
            week_start = now - timedelta(days=now.weekday())
            week_end = week_start + timedelta(days=6)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é
            week_data = self.sales_df[
                (self.sales_df['date'] >= week_start) & 
                (self.sales_df['date'] <= week_end)
            ].copy()
            
            if week_data.empty:
                return "üìä **–ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢**\n\n‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é"
            
            total_sales = (week_data['price'] * week_data['quantity']).sum()
            total_orders = len(week_data)
            avg_order = total_sales / total_orders if total_orders > 0 else 0
            
            # –¢–æ–ø –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–µ–ª–∏
            manager_sales = week_data.groupby('manager').agg({
                'price': lambda x: (x * week_data.loc[x.index, 'quantity']).sum()
            }).rename(columns={'price': 'sales'})
            top_manager = manager_sales['sales'].idxmax() if not manager_sales.empty else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            
            # –¢–æ–ø —Ç–æ–≤–∞—Ä –Ω–µ–¥–µ–ª–∏
            product_sales = week_data.groupby('name_boiler').agg({
                'price': lambda x: (x * week_data.loc[x.index, 'quantity']).sum()
            }).rename(columns={'price': 'sales'})
            top_product = product_sales['sales'].idxmax() if not product_sales.empty else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            
            report = f"""üìä **–ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢**
üìÖ –ü–µ—Ä–∏–æ–¥: {week_start.strftime('%d.%m')} - {week_end.strftime('%d.%m.%Y')}

üí∞ **–û–°–ù–û–í–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:**
‚Ä¢ –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {total_sales:,.0f} —Ç–µ–Ω–≥–µ
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_order:,.0f} —Ç–µ–Ω–≥–µ

üèÜ **–õ–£–ß–®–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:**
‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–µ–ª–∏: {top_manager}
‚Ä¢ –¢–æ–≤–∞—Ä –Ω–µ–¥–µ–ª–∏: {top_product}

üìà **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**
{self.get_ai_recommendations('weekly')}
"""
            
            return report
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}"
    
    def generate_monthly_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç"""
        try:
            now = datetime.now()
            month_data = self.sales_df[
                (self.sales_df['date'].dt.year == now.year) & 
                (self.sales_df['date'].dt.month == now.month)
            ].copy()
            
            if month_data.empty:
                return "üìä **–ú–ï–°–Ø–ß–ù–´–ô –û–¢–ß–ï–¢**\n\n‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü"
            
            total_sales = (month_data['price'] * month_data['quantity']).sum()
            total_orders = len(month_data)
            avg_order = total_sales / total_orders if total_orders > 0 else 0
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
            manager_analysis = month_data.groupby('manager').agg({
                'price': lambda x: (x * month_data.loc[x.index, 'quantity']).sum(),
                'quantity': 'sum',
                'order': 'count'
            }).rename(columns={'price': 'sales', 'order': 'orders'})
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
            product_analysis = month_data.groupby('name_boiler').agg({
                'price': lambda x: (x * month_data.loc[x.index, 'quantity']).sum(),
                'quantity': 'sum',
                'order': 'count'
            }).rename(columns={'price': 'sales', 'order': 'orders'})
            
            # –¢–æ–ø-3 –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            top_managers = manager_analysis.nlargest(3, 'sales')
            
            # –¢–æ–ø-3 —Ç–æ–≤–∞—Ä–∞
            top_products = product_analysis.nlargest(3, 'sales')
            
            report = f"""üìä **–ú–ï–°–Ø–ß–ù–´–ô –û–¢–ß–ï–¢**
üìÖ –ú–µ—Å—è—Ü: {now.strftime('%B %Y')}

üí∞ **–û–°–ù–û–í–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:**
‚Ä¢ –û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏: {total_sales:,.0f} —Ç–µ–Ω–≥–µ
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {avg_order:,.0f} —Ç–µ–Ω–≥–µ

üèÜ **–¢–û–ü-3 –ú–ï–ù–ï–î–ñ–ï–†–ê:**
"""
            
            for i, (manager, data) in enumerate(top_managers.iterrows(), 1):
                report += f"{i}. {manager}: {data['sales']:,.0f} —Ç–µ–Ω–≥–µ ({data['orders']} –∑–∞–∫–∞–∑–æ–≤)\n"
            
            report += "\nüè∑Ô∏è **–¢–û–ü-3 –¢–û–í–ê–†–ê:**\n"
            
            for i, (product, data) in enumerate(top_products.iterrows(), 1):
                report += f"{i}. {product}: {data['sales']:,.0f} —Ç–µ–Ω–≥–µ ({data['quantity']} —à—Ç.)\n"
            
            report += f"\nüìà **AI –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**\n{self.get_ai_recommendations('monthly')}"
            
            return report
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}"

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    ai = AIRecommendations("Alseit.xlsx")
    
    # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
    trends = ai.analyze_trends_and_patterns()
    print(trends)
    
    # AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = ai.get_ai_recommendations()
    print(recommendations)
    
    # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    weekly_report = ai.generate_weekly_report()
    print(weekly_report)
