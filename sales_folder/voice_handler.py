import os
import tempfile
import time
from telegram import File
from openai import OpenAI
from dotenv import load_dotenv
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

class VoiceHandler:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI Audio API
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç GPT-4o-mini –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        self.openai_client = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç
        try:
            openai_api_key = os.getenv('OPENAI_API_KEY')
            if openai_api_key:
                self.openai_client = OpenAI(api_key=openai_api_key)
                logger.info("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                logger.warning("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI: {e}")
            logger.info("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OpenAI: pip install openai")
    
    async def process_voice_message(self, voice_file: File) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Whisper
        
        Args:
            voice_file: –§–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram
            
        Returns:
            str: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        oga_file_path = None
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            temp_dir = tempfile.gettempdir()
            temp_filename = f"voice_{int(time.time())}_{os.getpid()}.oga"
            oga_file_path = os.path.join(temp_dir, temp_filename)
            
            logger.info(f"üìÅ –°–æ–∑–¥–∞—é –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {oga_file_path}")
            logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(temp_dir)}")
            logger.info(f"üìÅ –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å: {os.access(temp_dir, os.W_OK)}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.info(f"üì• –°–∫–∞—á–∏–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤: {oga_file_path}")
            logger.info(f"üìÅ –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å: {os.path.abspath(oga_file_path)}")
            
            # –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
            try:
                await voice_file.download_to_drive(oga_file_path)
                logger.info("‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω –º–µ—Ç–æ–¥–æ–º download_to_drive")
            except Exception as download_error:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ download_to_drive: {download_error}")
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                try:
                    file_content = await voice_file.download_as_bytearray()
                    with open(oga_file_path, 'wb') as f:
                        f.write(file_content)
                    logger.info("‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º")
                except Exception as alt_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {alt_error}")
                    return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {alt_error}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è
            if not os.path.exists(oga_file_path):
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            
            file_size = os.path.getsize(oga_file_path)
            logger.info(f"üìÅ OGA —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {oga_file_path} (—Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if file_size < 1000:  # –ú–µ–Ω—å—à–µ 1KB
                return "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω"
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å —Å –ø–æ–º–æ—â—å—é OpenAI Audio API
            if self.openai_client:
                text = self._recognize_speech_openai(oga_file_path)
                if text and len(text.strip()) > 0:
                    logger.info(f"üé§ OpenAI —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {text[:50]}...")
                    return text.strip()
                else:
                    return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç—á–µ."
            else:
                return "‚ùå OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª–µ"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}"
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if oga_file_path and os.path.exists(oga_file_path):
                try:
                    os.unlink(oga_file_path)
                    logger.debug(f"üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {oga_file_path}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
    
    def _recognize_speech_openai(self, audio_file_path: str) -> str:
        """
        –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä–µ—á—å —Å –ø–æ–º–æ—â—å—é OpenAI Audio API
        
        Args:
            audio_file_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç OGG, MP3, WAV –∏ –¥—Ä.)
            
        Returns:
            str: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(audio_file_path):
                logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_file_path}")
                return ""
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(audio_file_path)
            if file_size == 0:
                logger.error(f"‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π: {audio_file_path}")
                return ""
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ
            if not os.access(audio_file_path, os.R_OK):
                logger.error(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {audio_file_path}")
                return ""
            
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å OpenAI Audio API... –§–∞–π–ª: {audio_file_path} (—Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç)")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ OpenAI
            with open(audio_file_path, 'rb') as audio_file:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI Audio API –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
                transcript = self.openai_client.audio.transcriptions.create(
                    model="whisper-1",
                    file=audio_file,
                    language="ru",  # –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
                    response_format="text"
                )
            
            text = transcript.strip()
            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç OpenAI: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            return text
            
        except FileNotFoundError as e:
            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è OpenAI: {e}")
            return ""
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è OpenAI: {e}")
            return ""
    
    
    def parse_voice_command(self, recognized_text: str) -> dict:
        """
        –ü–∞—Ä—Å–∏—Ç –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π
        
        Args:
            recognized_text: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            
        Returns:
            dict: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ
        """
        if not self.openai_client:
            return {
                'success': False,
                'error': 'OpenAI AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–∞–Ω–¥—ã'
            }
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
            prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, —á—Ç–æ –æ–Ω —Ö–æ—á–µ—Ç —Å–¥–µ–ª–∞—Ç—å.
            
            –ö–û–ú–ê–ù–î–ê: "{recognized_text}"
            
            –ü–†–ò–û–†–ò–¢–ï–¢ 1: –†–ê–°–•–û–î–´ - –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–æ–≤–∞: –ø–æ—Ç—Ä–∞—Ç–∏–ª, –∫—É–ø–∏–ª, –∑–∞–ø–ª–∞—Ç–∏–ª, –æ–ø–ª–∞—Ç–∏–ª, –ø–æ–µ–ª, —Å—ä–µ–ª, –≤—ã–ø–∏–ª, –∑–∞–∫–∞–∑–∞–ª (–µ–¥—É/—É—Å–ª—É–≥–∏)
            - –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø —Ä–∞—Å—Ö–æ–¥–∞: 
              * personal (–ª–∏—á–Ω—ã–µ) - –µ–¥–∞, –∫–∞—Ñ–µ, —Ä–µ—Å—Ç–æ—Ä–∞–Ω, —Ç–∞–∫—Å–∏, –±–µ–Ω–∑–∏–Ω, –∞—Ä–µ–Ω–¥–∞, –ø—Ä–æ–¥—É–∫—Ç—ã, –æ–¥–µ–∂–¥–∞, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
              * office (–æ—Ñ–∏—Å–Ω—ã–µ) - –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—è, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, —É–±–æ—Ä–∫–∞ –æ—Ñ–∏—Å–∞, –∞—Ä–µ–Ω–¥–∞ –æ—Ñ–∏—Å–∞, –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –æ—Ñ–∏—Å–∞
            - –ò–∑–≤–ª–µ–∫–∏ —Å—É–º–º—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ (—á–∏—Å–ª–∞)
            - –û–ø—Ä–µ–¥–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: –µ–¥–∞, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –∂–∏–ª—å–µ, —Å–≤—è–∑—å, –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—è, —É–±–æ—Ä–∫–∞ –æ—Ñ–∏—Å–∞, —Ä–µ—Å—Ç–æ—Ä–∞–Ω, –∫–∞—Ñ–µ, —Ç–∞–∫—Å–∏, –±–µ–Ω–∑–∏–Ω, –∞—Ä–µ–Ω–¥–∞ –∏ —Ç.–¥.
            
            –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ó–ê–ö–ê–ó–´ - –µ—Å–ª–∏ –ù–ï–¢ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç—Ä–∞—Ç, –Ω–æ –µ—Å—Ç—å —Å–ª–æ–≤–∞: –∑–∞–∫–∞–∑, –∏–∑–º–µ–Ω–∏, –ø–æ–º–µ–Ω—è–π, –Ω–∞–∑–Ω–∞—á—å
            1. –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∑–∞–∫–∞–∑–µ
            2. –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –≤ –∑–∞–∫–∞–∑–µ  
            3. –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
            4. –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
            5. –û–±–Ω–æ–≤–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É
            6. –î—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            
            –°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê (JSON):
            {{
                "action": "edit_order|get_info|update_salary|add_multiple_expenses|other",
                "order_number": —á–∏—Å–ª–æ –∏–ª–∏ null,
                "field_to_change": "quantity|price|manager|null",
                "new_value": "–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ null",
                "product_name": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ null",
                "expenses": [
                    {{
                        "expense_type": "personal|office",
                        "amount": —á–∏—Å–ª–æ,
                        "category": "–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–∞",
                        "description": "–æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞"
                    }}
                ],
                "confidence": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1,
                "original_text": "–∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç"
            }}
            
            –ü–†–ò–ú–ï–†–´:
            
            –†–ê–°–•–û–î–´ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1 - –µ—Å–ª–∏ –µ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç—Ä–∞—Ç, –ø–æ–∫—É–ø–æ–∫, –æ–ø–ª–∞—Ç):
            
            –û–î–ò–ù–û–ß–ù–´–ï –†–ê–°–•–û–î–´:
            - "–ø–æ—Ç—Ä–∞—Ç–∏–ª 5000 –≤ –∫–∞—Ñ–µ" -> action: "add_multiple_expenses", expenses: [{{"expense_type": "personal", "amount": 5000, "category": "–µ–¥–∞", "description": "–∫–∞—Ñ–µ"}}]
            - "–∫—É–ø–∏–ª –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ 15000" -> action: "add_multiple_expenses", expenses: [{{"expense_type": "personal", "amount": 15000, "category": "–µ–¥–∞", "description": "–ø—Ä–æ–¥—É–∫—Ç—ã"}}]
            - "–∑–∞–ø–ª–∞—Ç–∏–ª –∑–∞ —Ç–∞–∫—Å–∏ 3000" -> action: "add_multiple_expenses", expenses: [{{"expense_type": "personal", "amount": 3000, "category": "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "description": "—Ç–∞–∫—Å–∏"}}]
            - "–∫—É–ø–∏–ª –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—é –Ω–∞ 5000" -> action: "add_multiple_expenses", expenses: [{{"expense_type": "office", "amount": 5000, "category": "–∫–∞–Ω—Ü–µ–ª—è—Ä–∏—è", "description": "–∫–∞–Ω—Ü–µ–ª—è—Ä–∏—è"}}]
            
            –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï –†–ê–°–•–û–î–´:
            - "–ø–æ–µ–ª —Ä–∞–º–µ–Ω –Ω–∞ 1000 –∏ –ø–æ—Ç—Ä–∞—Ç–∏–ª 150 –Ω–∞ –∞–≤—Ç–æ–±—É—Å" -> action: "add_multiple_expenses", expenses: [{{"expense_type": "personal", "amount": 1000, "category": "–µ–¥–∞", "description": "—Ä–∞–º–µ–Ω"}}, {{"expense_type": "personal", "amount": 150, "category": "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "description": "–∞–≤—Ç–æ–±—É—Å"}}]
            - "–∫—É–ø–∏–ª —Ö–ª–µ–± –∑–∞ 500 –∏ –º–æ–ª–æ–∫–æ –∑–∞ 800" -> action: "add_multiple_expenses", expenses: [{{"expense_type": "personal", "amount": 500, "category": "–µ–¥–∞", "description": "—Ö–ª–µ–±"}}, {{"expense_type": "personal", "amount": 800, "category": "–µ–¥–∞", "description": "–º–æ–ª–æ–∫–æ"}}]
            - "–∑–∞–ø–ª–∞—Ç–∏–ª –∑–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç 25000 –∏ —É–±–æ—Ä–∫—É –æ—Ñ–∏—Å–∞ 15000" -> action: "add_multiple_expenses", expenses: [{{"expense_type": "office", "amount": 25000, "category": "—Å–≤—è–∑—å", "description": "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç"}}, {{"expense_type": "office", "amount": 15000, "category": "—É–±–æ—Ä–∫–∞ –æ—Ñ–∏—Å–∞", "description": "—É–±–æ—Ä–∫–∞ –æ—Ñ–∏—Å–∞"}}]
            
            –ó–ê–ö–ê–ó–´ (–µ—Å–ª–∏ –ù–ï–¢ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç—Ä–∞—Ç):
            - "–∏–∑–º–µ–Ω–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–ª–æ–≤ 3 —à—Ç—É–∫–∏ –≤ –Ω–æ–º–µ—Ä–µ –∑–∞–∫–∞–∑–∞ 2" -> action: "edit_order", order_number: 2, field_to_change: "quantity", new_value: "3", product_name: "–∫–æ—Ç–ª—ã"
            - "–ø–æ–º–µ–Ω—è–π —Ü–µ–Ω—É –≤ –∑–∞–∫–∞–∑–µ 5 –Ω–∞ 50000" -> action: "edit_order", order_number: 5, field_to_change: "price", new_value: "50000"
            - "–Ω–∞–∑–Ω–∞—á—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ê–ª–∏–±–µ–∫ –≤ –∑–∞–∫–∞–∑–µ 3" -> action: "edit_order", order_number: 3, field_to_change: "manager", new_value: "–ê–ª–∏–±–µ–∫"
            - "–∏–∑–º–µ–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞ –ê–π–¥–∞–Ω–∞ –≤ –∑–∞–∫–∞–∑–µ 2" -> action: "edit_order", order_number: 2, field_to_change: "manager", new_value: "–ê–π–¥–∞–Ω–∞"
            - "–ø–æ–º–µ–Ω—è–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞ –¢–∞–º–µ—Ä –≤ –∑–∞–∫–∞–∑–µ 1" -> action: "edit_order", order_number: 1, field_to_change: "manager", new_value: "–¢–∞–º–µ—Ä"
            
            –î–û–°–¢–£–ü–ù–´–ï –ú–ï–ù–ï–î–ñ–ï–†–´: –ê–ª–∏–±–µ–∫, –ê–π–¥–∞–Ω–∞, –¢–∞–º–µ—Ä, –î–∏–∞–Ω–∞, –†—É—Å–ª–∞–Ω, manager_3, manager_7
            
            –í–ê–ñ–ù–û –î–õ–Ø –†–ê–°–•–û–î–û–í:
            - –í–°–ï–ì–î–ê –∏–∑–≤–ª–µ–∫–∞–π —Å—É–º–º—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–∏—â–∏ —á–∏—Å–ª–∞: 1000, 2000, 5000, 10000 –∏ —Ç.–¥.)
            - –í–°–ï–ì–î–ê –æ–ø—Ä–µ–¥–µ–ª—è–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:
              * "–ø–æ–µ–ª", "—Å—ä–µ–ª", "–≤—ã–ø–∏–ª", "–∫–∞—Ñ–µ", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω", "–µ–¥–∞", "–ø—Ä–æ–¥—É–∫—Ç—ã" ‚Üí "–µ–¥–∞"
              * "—Ç–∞–∫—Å–∏", "–±–µ–Ω–∑–∏–Ω", "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç" ‚Üí "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç" 
              * "–∫–∞–Ω—Ü–µ–ª—è—Ä–∏—è", "—Ä—É—á–∫–∏", "–±—É–º–∞–≥–∞" ‚Üí "–∫–∞–Ω—Ü–µ–ª—è—Ä–∏—è"
              * "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "—Å–≤—è–∑—å" ‚Üí "—Å–≤—è–∑—å"
              * "–∞—Ä–µ–Ω–¥–∞", "–∂–∏–ª—å–µ" ‚Üí "–∂–∏–ª—å–µ"
              * "—É–±–æ—Ä–∫–∞" ‚Üí "—É–±–æ—Ä–∫–∞ –æ—Ñ–∏—Å–∞" (–µ—Å–ª–∏ –æ—Ñ–∏—Å) –∏–ª–∏ "—É–±–æ—Ä–∫–∞" (–µ—Å–ª–∏ –ª–∏—á–Ω–æ–µ)
            - –ï—Å–ª–∏ —Å—É–º–º–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —è–≤–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–Ω—è—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—Ç—ã—Å—è—á–∏" = 1000)
            
            –í–ê–ñ–ù–û: 
            - "–ê–π–¥–∞–Ω–∞" - —ç—Ç–æ –ø–æ–ª–Ω–æ–µ –∏–º—è, –Ω–µ —Å–æ–∫—Ä–∞—â–∞–π –µ–≥–æ
            - "–ê–ª–∏–±–µ–∫" - —ç—Ç–æ –ø–æ–ª–Ω–æ–µ –∏–º—è, –Ω–µ —Å–æ–∫—Ä–∞—â–∞–π –µ–≥–æ
            - "–¢–∞–º–µ—Ä" - —ç—Ç–æ –ø–æ–ª–Ω–æ–µ –∏–º—è, –Ω–µ —Å–æ–∫—Ä–∞—â–∞–π –µ–≥–æ
            - "–î–∏–∞–Ω–∞" - —ç—Ç–æ –ø–æ–ª–Ω–æ–µ –∏–º—è, –Ω–µ —Å–æ–∫—Ä–∞—â–∞–π –µ–≥–æ
            - "–†—É—Å–ª–∞–Ω" - —ç—Ç–æ –ø–æ–ª–Ω–æ–µ –∏–º—è, –Ω–µ —Å–æ–∫—Ä–∞—â–∞–π –µ–≥–æ
            - "–æ–±–Ω–æ–≤–∏ –∑–∞—Ä–ø–ª–∞—Ç—É" -> action: "update_salary"
            - "–ø–æ–∫–∞–∂–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ 1" -> action: "get_info", order_number: 1
            
            –í–ê–ñ–ù–û: 
            - –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
            - –ù–ï –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–æ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            - –ù–∞—á–∏–Ω–∞–π –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É —Å —Å–∏–º–≤–æ–ª–∞ –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏
            - –ó–∞–∫–∞–Ω—á–∏–≤–∞–π –æ—Ç–≤–µ—Ç —Å–∏–º–≤–æ–ª–æ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏
            """
            
            response = self.openai_client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=500,
                temperature=0.3
            )
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            import json
            try:
                response_text = response.choices[0].message.content.strip()
                logger.info(f"üìù –û—Ç–≤–µ—Ç ChatGPT: {response_text[:200]}...")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ
                if '{' in response_text and '}' in response_text:
                    # –ò—â–µ–º JSON –±–ª–æ–∫
                    start = response_text.find('{')
                    end = response_text.rfind('}') + 1
                    json_text = response_text[start:end]
                    
                    command_data = json.loads(json_text)
                    command_data['success'] = True
                    logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: {command_data.get('action', 'unknown')}")
                    return command_data
                else:
                    logger.warning("‚ö†Ô∏è JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ ChatGPT")
                    return self._manual_parse_command(recognized_text)
                    
            except json.JSONDecodeError as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                logger.warning(f"‚ö†Ô∏è –û—Ç–≤–µ—Ç ChatGPT: {response_text}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é
                return self._manual_parse_command(recognized_text)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–∞–Ω–¥—ã: {e}")
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–∞–Ω–¥—ã: {e}'
            }
    
    def create_text_command(self, command_data: dict) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            command_data: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            
        Returns:
            str: –¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        try:
            action = command_data.get('action', '')
            order_number = command_data.get('order_number')
            field_to_change = command_data.get('field_to_change')
            new_value = command_data.get('new_value')
            product_name = command_data.get('product_name')
            
            if action == 'edit_order' and order_number:
                if field_to_change == 'quantity' and new_value:
                    if product_name:
                        return f"/edit {order_number} {product_name} quantity {new_value}"
                    else:
                        return f"/edit {order_number} quantity {new_value}"
                elif field_to_change == 'price' and new_value:
                    return f"/edit {order_number} price {new_value}"
                elif field_to_change == 'manager' and new_value:
                    return f"/edit {order_number} manager {new_value}"
            
            elif action == 'get_info' and order_number:
                return f"/info {order_number}"
            
            elif action == 'update_salary':
                return "/update"
            
            elif action == 'add_multiple_expenses':
                # –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
                expenses = command_data.get('expenses', [])
                commands = []
                for expense in expenses:
                    expense_type = expense.get('expense_type', 'personal')
                    amount = expense.get('amount', 0)
                    category = expense.get('category', '–¥—Ä—É–≥–æ–µ')
                    description = expense.get('description', '')
                    
                    if expense_type == 'personal':
                        commands.append(f"–ø–æ—Ç—Ä–∞—Ç–∏–ª {amount} –Ω–∞ {category} ({description})")
                    else:  # office
                        commands.append(f"–∫—É–ø–∏–ª {description} –Ω–∞ {amount} ({category})")
                
                return " | ".join(commands)
            
            else:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É
                return command_data.get('original_text', '')
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã: {e}")
            return command_data.get('original_text', '')
    
    

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    handler = VoiceHandler()
    info = handler.get_model_info()
    print("üé§ Voice Handler –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print(f"üìä –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π: {info}")