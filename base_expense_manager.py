"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞–º–∏
"""
import pandas as pd
import os
from datetime import datetime, date
from openai import OpenAI
import json
import re
from typing import Optional, Tuple, List, Dict, Any


class BaseExpenseManager:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞–º–∏"""
    
    def __init__(self, excel_file_path: str, sheet_name: str, 
                 fixed_expenses: List[Dict[str, Any]]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
        
        Args:
            excel_file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
            sheet_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
            fixed_expenses: –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
        """
        self.excel_file = excel_file_path
        self.sheet_name = sheet_name
        self.fixed_expenses = fixed_expenses
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç
        api_key = os.getenv("OPENAI_API_KEY")
        if api_key:
            self.client = OpenAI(api_key=api_key)
        else:
            self.client = None
    
    def add_fixed_expenses_if_needed(self) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ –Ω–∞—á–∞–ª–µ –º–µ—Å—è—Ü–∞, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç"""
        try:
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            df = self._read_excel_data()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
            current_month = datetime.now().month
            current_year = datetime.now().year
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
            if not df.empty:
                df['date'] = pd.to_datetime(df['date'], format='%d.%m.%Y', 
                                          errors='coerce')
                current_month_expenses = df[
                    (df['date'].dt.month == current_month) & 
                    (df['date'].dt.year == current_year) &
                    (df['category'].isin([exp['category'] for exp in self.fixed_expenses]))
                ]
                
                if not current_month_expenses.empty:
                    return False  # –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
            new_expenses = []
            for expense in self.fixed_expenses:
                new_expenses.append({
                    'date': date.today().strftime('%d.%m.%Y'),
                    'category': expense['category'],
                    'amount': expense['amount'],
                    'payment_method': expense['payment_method'],
                    'comments': expense['comments']
                })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º
            new_df = pd.DataFrame(new_expenses)
            if not df.empty:
                combined_df = pd.concat([df, new_df], ignore_index=True)
            else:
                combined_df = new_df
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ Excel
            self._save_excel_data(combined_df)
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤: {e}")
            return False
    
    def categorize_expense(self, text: str) -> Tuple[str, float]:
        """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç GPT –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞"""
        if not self.client:
            return "–ø—Ä–æ—á–µ–µ", 0.5
            
        try:
            prompt = self._create_categorization_prompt(text)
            
            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=100
            )
            
            result = json.loads(response.choices[0].message.content)
            return result['category'], result.get('confidence', 0.8)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return "–ø—Ä–æ—á–µ–µ", 0.5
    
    def add_expense_from_voice(self, text: str, amount: Optional[float] = None) -> Tuple[bool, str]:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Ö–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥
            category, confidence = self.categorize_expense(text)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
            if amount is None:
                amount = self._extract_amount_from_text(text)
                if amount is None:
                    return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: '5000 –µ–¥–∞' –∏–ª–∏ '150–∫ –∫–∞—Ñ–µ'"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
            payment_method = self._determine_payment_method(text)
            
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            df = self._read_excel_data()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥
            new_expense = {
                'date': date.today().strftime('%d.%m.%Y'),
                'category': category,
                'amount': amount,
                'payment_method': payment_method,
                'comments': text
            }
            
            new_df = pd.DataFrame([new_expense])
            if not df.empty:
                combined_df = pd.concat([df, new_df], ignore_index=True)
            else:
                combined_df = new_df
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ Excel
            self._save_excel_data(combined_df)
            
            return True, f"–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: {category} - {amount} —Ç–µ–Ω–≥–µ"
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞: {e}")
            return False, f"–û—à–∏–±–∫–∞: {str(e)}"
    
    def get_monthly_summary(self, month: Optional[int] = None, 
                           year: Optional[int] = None) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü"""
        try:
            if month is None:
                month = datetime.now().month
            if year is None:
                year = datetime.now().year
            
            df = self._read_excel_data()
            if df.empty:
                return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö"
            
            df['date'] = pd.to_datetime(df['date'], format='%d.%m.%Y', 
                                      errors='coerce')
            monthly_data = df[
                (df['date'].dt.month == month) & 
                (df['date'].dt.year == year)
            ]
            
            if monthly_data.empty:
                return f"–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ {month}.{year}"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            summary = monthly_data.groupby('category')['amount'].sum().sort_values(ascending=False)
            total = summary.sum()
            
            result = f"üìä {self.sheet_name.title()} —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ {month}.{year}\n\n"
            for category, amount in summary.items():
                percentage = (amount / total) * 100
                result += f"‚Ä¢ {category}: {amount:,.0f} ‚Ç∏ ({percentage:.1f}%)\n"
            
            result += f"\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total:,.0f} ‚Ç∏"
            return result
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–æ–¥–∫–∏: {str(e)}"
    
    def get_category_breakdown(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–±–∏–≤–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"""
        return self.get_monthly_summary()
    
    def get_recent_expenses(self, limit: int = 10) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã"""
        try:
            df = self._read_excel_data()
            if df.empty:
                return f"üìã **–ü–û–°–õ–ï–î–ù–ò–ï {self.sheet_name.upper()} –†–ê–°–•–û–î–´**\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—Ä—Ö—É)
            df['date'] = pd.to_datetime(df['date'], format='%d.%m.%Y', 
                                      errors='coerce')
            recent_data = df.sort_values('date', ascending=False).head(limit)
            
            summary = f"üìã **–ü–û–°–õ–ï–î–ù–ò–ï {len(recent_data)} {self.sheet_name.upper()} –†–ê–°–•–û–î–û–í**\n\n"
            
            for _, row in recent_data.iterrows():
                date_str = row['date'].strftime('%d.%m.%Y') if pd.notna(row['date']) else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                summary += f"‚Ä¢ {date_str} | {row['category']} | {row['amount']:,.0f} —Ç–µ–Ω–≥–µ\n"
                if pd.notna(row['comments']) and row['comments'].strip():
                    summary += f"  üí¨ {row['comments']}\n"
                summary += "\n"
            
            return summary
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤: {e}"
    
    def get_weekly_summary(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é"""
        try:
            from datetime import timedelta
            df = self._read_excel_data()
            if df.empty:
                return f"üìä **–°–í–û–î–ö–ê {self.sheet_name.upper()} –†–ê–°–•–û–î–û–í –ó–ê –ù–ï–î–ï–õ–Æ**\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
            today = datetime.now().date()
            start_of_week = today - timedelta(days=today.weekday())
            end_of_week = start_of_week + timedelta(days=6)
            
            df['date'] = pd.to_datetime(df['date'], format='%d.%m.%Y', 
                                      errors='coerce')
            start_of_week_dt = pd.Timestamp(start_of_week)
            end_of_week_dt = pd.Timestamp(end_of_week) + pd.Timedelta(days=1)
            
            weekly_data = df[
                (df['date'] >= start_of_week_dt) & 
                (df['date'] < end_of_week_dt)
            ]
            
            if weekly_data.empty:
                return f"üìä **–°–í–û–î–ö–ê {self.sheet_name.upper()} –†–ê–°–•–û–î–û–í –ó–ê –ù–ï–î–ï–õ–Æ ({start_of_week.strftime('%d.%m')} - {end_of_week.strftime('%d.%m')})**\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            category_summary = weekly_data.groupby('category')['amount'].sum().sort_values(ascending=False)
            total_amount = weekly_data['amount'].sum()
            
            summary = f"üìä **–°–í–û–î–ö–ê {self.sheet_name.upper()} –†–ê–°–•–û–î–û–í –ó–ê –ù–ï–î–ï–õ–Æ ({start_of_week.strftime('%d.%m')} - {end_of_week.strftime('%d.%m')})**\n\n"
            summary += f"üí∞ **–û–±—â–∞—è —Å—É–º–º–∞:** {total_amount:,.0f} —Ç–µ–Ω–≥–µ\n\n"
            summary += "üìã **–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:**\n"
            
            for category, amount in category_summary.items():
                percentage = (amount / total_amount) * 100
                summary += f"‚Ä¢ {category}: {amount:,.0f} —Ç–µ–Ω–≥–µ ({percentage:.1f}%)\n"
            
            return summary
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}"
    
    def get_gpt_analysis(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç GPT –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
        if not self.client:
            return f"ü§ñ **GPT –ê–ù–ê–õ–ò–ó {self.sheet_name.upper()} –†–ê–°–•–û–î–û–í**\n\nOpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            
        try:
            from datetime import timedelta
            df = self._read_excel_data()
            if df.empty:
                return f"ü§ñ **GPT –ê–ù–ê–õ–ò–ó {self.sheet_name.upper()} –†–ê–°–•–û–î–û–í**\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            thirty_days_ago = datetime.now() - timedelta(days=30)
            df['date'] = pd.to_datetime(df['date'], format='%d.%m.%Y', 
                                      errors='coerce')
            recent_data = df[df['date'] >= thirty_days_ago]
            
            if recent_data.empty:
                return f"ü§ñ **GPT –ê–ù–ê–õ–ò–ó {self.sheet_name.upper()} –†–ê–°–•–û–î–û–í**\n\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 30 –¥–Ω–µ–π)"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            category_summary = recent_data.groupby('category')['amount'].sum().sort_values(ascending=False)
            total_amount = recent_data['amount'].sum()
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT
            prompt = self._create_analysis_prompt(category_summary, total_amount)
            
            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=300
            )
            
            analysis = response.choices[0].message.content.strip()
            return f"ü§ñ **GPT –ê–ù–ê–õ–ò–ó {self.sheet_name.upper()} –†–ê–°–•–û–î–û–í**\n\n{analysis}"
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}"
    
    def edit_last_expense(self, new_category: Optional[str] = None, 
                         new_amount: Optional[float] = None) -> Tuple[bool, str]:
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–∞—Å—Ö–æ–¥"""
        try:
            df = self._read_excel_data()
            if df.empty:
                return False, "–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥
            last_index = len(df) - 1
            last_expense = df.iloc[last_index].copy()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            if new_category:
                df.at[last_index, 'category'] = new_category
            if new_amount:
                df.at[last_index, 'amount'] = new_amount
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self._save_excel_data(df)
            
            return True, f"{self.sheet_name.title()} —Ä–∞—Å—Ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω: {df.at[last_index, 'category']} - {df.at[last_index, 'amount']:,.0f} —Ç–µ–Ω–≥–µ"
            
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}"
    
    def _read_excel_data(self) -> pd.DataFrame:
        """–ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞"""
        try:
            return pd.read_excel(self.excel_file, sheet_name=self.sheet_name)
        except Exception:
            return pd.DataFrame(columns=['date', 'category', 'amount', 'payment_method', 'comments'])
    
    def _save_excel_data(self, df: pd.DataFrame) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Excel —Ñ–∞–π–ª"""
        with pd.ExcelWriter(self.excel_file, engine='openpyxl', mode='a', 
                          if_sheet_exists='replace') as writer:
            df.to_excel(writer, sheet_name=self.sheet_name, index=False)
    
    def _extract_amount_from_text(self, text: str) -> Optional[float]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—É–º–º—É –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –ò—â–µ–º —Å—É–º–º—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö: 150–∫, 150000, 1.5–∫, 1500
        amount_match = re.search(r'(\d+(?:\.\d+)?)\s*–∫', text, re.IGNORECASE)
        if amount_match:
            return float(amount_match.group(1)) * 1000
        else:
            amount_match = re.search(r'(\d+(?:\.\d+)?)', text)
            if amount_match:
                return float(amount_match.group(1))
        return None
    
    def _determine_payment_method(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        if any(word in text.lower() for word in ['–Ω–∞–ª–∏—á–Ω—ã–µ', '–Ω–∞–ª–∏—á–∫–æ–π', '–¥–µ–Ω—å–≥–∏']):
            return "–Ω–∞–ª–∏—á–Ω—ã–µ"
        return "–∫–∞—Ä—Ç–∞"
    
    def _create_categorization_prompt(self, text: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)"""
        return f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–π —Ä–∞—Å—Ö–æ–¥: {text}"
    
    def _create_analysis_prompt(self, category_summary: pd.Series, 
                               total_amount: float) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)"""
        return f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–∞—Å—Ö–æ–¥—ã: {total_amount} —Ç–µ–Ω–≥–µ"
